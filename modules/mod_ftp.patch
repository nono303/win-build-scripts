Index: include/mod_ftp.h
===================================================================
--- include/mod_ftp.h	(revision 1303730)
+++ include/mod_ftp.h	(working copy)
@@ -49,13 +49,25 @@
 #ifndef VERSION_ONLY
 
 #include "httpd.h"
-#include "http_config.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+#if AP_MODULE_MAGIC_AT_LEAST(20111203,0)
+/* AP24 - connection record has client_ip */
+#define CLIENT_IP client_ip
+#define CLIENT_ADDR client_addr
+#include "http_log.h"
+APLOG_USE_MODULE(ftp);
+#else
+/* AP22 - connection record has remote_ip */
+#define CLIENT_IP remote_ip
+#define CLIENT_ADDR remote_addr
+#endif
 
+#include "http_config.h"
+
 /* FTP Reply Codes */
 
 #define FTP_REPLY_RESTART_MARKER          110
Index: modules/ftp/ftp_protocol.c
===================================================================
--- modules/ftp/ftp_protocol.c	(revision 1303730)
+++ modules/ftp/ftp_protocol.c	(working copy)
@@ -500,6 +500,12 @@
     r->protocol = "FTP";
     r->method = NULL;
 
+#if AP_MODULE_MAGIC_AT_LEAST(20111203,0)
+    /* AP24 request fields */
+    r->useragent_addr = c->CLIENT_ADDR;
+    r->useragent_ip = c->CLIENT_IP;
+#endif
+
     /*
      * We don't use r->uri for every request, but some modules (SSL) require
      * r->uri to not be NULL in the post_read_request hook
Index: modules/ftp/ftp_limitlogin.c
===================================================================
--- modules/ftp/ftp_limitlogin.c	(revision 1303730)
+++ modules/ftp/ftp_limitlogin.c	(working copy)
@@ -203,7 +203,7 @@
      * Now we check the IP settings.
      * This is a safe cast, this is a lookup key.
      */
-    tkey = apr_psprintf(r->pool, "%s-%s", sname, c->remote_ip);
+    tkey = apr_psprintf(r->pool, "%s-%s", sname, c->CLIENT_IP);
     ikey.dptr = (char *) tkey;
     ikey.dsize = strlen(tkey);
     rv = apr_dbm_fetch(dbf, ikey, &val);        /* error for non-existant? */
@@ -310,7 +310,7 @@
         uval = atoi(temp);
     }
 
-    tkey = apr_psprintf(c->pool, "%s-%s", sname, c->remote_ip);
+    tkey = apr_psprintf(c->pool, "%s-%s", sname, c->CLIENT_IP);
     ikey.dptr = (char *) tkey;
     ikey.dsize = strlen(tkey);
     rv = apr_dbm_fetch(dbf, ikey, &val);        /* error for non-existant? */
Index: modules/ftp/ftp_message.c
===================================================================
--- modules/ftp/ftp_message.c	(revision 1303730)
+++ modules/ftp/ftp_message.c	(working copy)
@@ -56,7 +56,7 @@
                 apr_snprintf(outptr, outlen, "%s", fc->cwd);
                 break;
             case 'h':
-                apr_getnameinfo(&remote_host, c->remote_addr, 0);
+                apr_getnameinfo(&remote_host, c->CLIENT_ADDR, 0);
                 apr_snprintf(outptr, outlen, "%s", remote_host);
                 break;
             case 'L':
@@ -71,7 +71,7 @@
                 apr_snprintf(outptr, outlen, "%s", c->local_ip);
                 break;
             case 'a':
-                apr_snprintf(outptr, outlen, "%s", c->remote_ip);
+                apr_snprintf(outptr, outlen, "%s", c->CLIENT_IP);
                 break;
             case 'u':
                 apr_snprintf(outptr, outlen, "%s", fc->user);
Index: modules/ftp/ftp_data_connection.c
===================================================================
--- modules/ftp/ftp_data_connection.c	(revision 1303730)
+++ modules/ftp/ftp_data_connection.c	(working copy)
@@ -217,6 +217,14 @@
  *
  * Returns: apr_status_t
  */
+
+#if AP_MODULE_MAGIC_AT_LEAST(20111203,0)
+struct core_filter_ctx {
+    apr_bucket_brigade *b;
+    apr_bucket_brigade *tmpbb;
+};
+#endif
+
 conn_rec *ftp_open_dataconn(request_rec *r, int write_not_read)
 {
     ftp_server_config *fsc = ftp_get_module_config(r->server->module_config);
@@ -245,11 +253,11 @@
      */
     if (fc->clientsa == NULL) { /* Only check PASV, never PORT connections */
         if (!(fsc->options & FTP_OPT_ALLOWPROXYPASV)) {
-            if (strcmp(fc->connection->remote_ip, cdata->remote_ip) != 0) {
+            if (strcmp(fc->connection->CLIENT_IP, cdata->CLIENT_IP) != 0) {
                 ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
                              "PASV data connection attempt from %s "
                              "doesn't match the client IP %s",
-                             cdata->remote_ip, fc->connection->remote_ip);
+                             cdata->CLIENT_IP, fc->connection->CLIENT_IP);
                 ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,
                              "PASV data connection attempt denied, "
                              "not configured to AllowProxyPASV");
@@ -278,6 +286,7 @@
          * Insert this bucket type only for read connections
          */
         for (f = cdata->input_filters; f; f = f->next) {
+
             if (strcasecmp(f->frec->name, "CORE_IN") == 0) {
                 core_net_rec *net = f->ctx;
                 apr_bucket *e;
Index: modules/ftp/ftp_commands.c
===================================================================
--- modules/ftp/ftp_commands.c	(revision 1303730)
+++ modules/ftp/ftp_commands.c	(working copy)
@@ -1310,7 +1310,7 @@
 
         ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_INFO, 0,
                      r->server, "FTP LOGIN FROM %s as %s",
-                     c->remote_ip, fc->user);
+                     c->CLIENT_IP, fc->user);
 
         if (dconf->readme) {
             if (dconf->readme_isfile) {
@@ -1347,18 +1347,18 @@
         ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_ERR, 0,
                      r->server,
                      "ANONYMOUS FTP LOGIN REFUSED FROM %s",
-                     c->remote_ip);
+                     c->CLIENT_IP);
     }
     else {
         ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_ERR, 0,
                      r->server, "FTP LOGIN REFUSED FROM %s, %s",
-                     c->remote_ip, fc->user);
+                     c->CLIENT_IP, fc->user);
     }
 pass_try_again:
     if (++fc->login_attempts == fsc->max_login_attempts) {
         ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_ERR, 0,
                      r->server, "repeated login failures from %s",
-                     c->remote_ip);
+                     c->CLIENT_IP);
 
         fc->response_notes = "Maximum login attempts reached, closing connection.";
         fc->close_connection = 1;
@@ -1873,12 +1873,12 @@
     if (!(fsc->options & FTP_OPT_ALLOWPROXYPORT)) {
         char *test_ip = "(unknown)";
         if (apr_sockaddr_ip_get(&test_ip, fc->clientsa) != APR_SUCCESS
-            || (strcasecmp(test_ip, c->remote_ip) != 0)) {
+            || (strcasecmp(test_ip, c->CLIENT_IP) != 0)) {
             ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,
                          "Rejected EPRT data connection request to %s "
                          "(doesn't match the client IP %s and "
                          "not configured to AllowProxyPORT)",
-                         test_ip, c->remote_ip);
+                         test_ip, c->CLIENT_IP);
             fc->response_notes = "Invalid EPRT command, proxy EPRT is"
                                  " not permitted";
             return FTP_REPLY_SYNTAX_ERROR;
@@ -1925,12 +1925,12 @@
      * FTPOptions AllowProxyPORT
      */
     if (!(fsc->options & FTP_OPT_ALLOWPROXYPORT)) {
-        if (strcasecmp(ip_addr, c->remote_ip) != 0) {
+        if (strcasecmp(ip_addr, c->CLIENT_IP) != 0) {
             ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,
                          "Rejected PORT data connection request to %s "
                          "(doesn't match the client IP %s and "
                          "not configured to AllowProxyPORT)",
-                         ip_addr, c->remote_ip);
+                         ip_addr, c->CLIENT_IP);
             fc->response_notes = "Invalid PORT command, proxy PORT is"
                                  " not permitted";
             return FTP_REPLY_SYNTAX_ERROR;
