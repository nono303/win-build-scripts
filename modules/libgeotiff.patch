 libgeotiff/CMakeLists.txt       | 240 ++++++++++++++++++++++------------------
 libgeotiff/cmake/FindPROJ.cmake | 135 ++++++++++++++--------
 2 files changed, 221 insertions(+), 154 deletions(-)

diff --git a/libgeotiff/CMakeLists.txt b/libgeotiff/CMakeLists.txt
index 4862f86..ab7adc3 100644
--- a/libgeotiff/CMakeLists.txt
+++ b/libgeotiff/CMakeLists.txt
@@ -5,7 +5,7 @@
 # Author: Mateusz Loskot <mateusz@loskot.net>
 #
 ###############################################################################
-CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
 
 PROJECT(GeoTIFF)
 
@@ -46,6 +46,8 @@ SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
 # General build settings
 
 option(BUILD_SHARED_LIBS "Set ON to build shared library" ON)
+option(BUILD_MAN "Set ON to build man pages" ON)
+option(BUILD_DOC "Set ON to build doc files" ON)
 
 IF(NOT CMAKE_BUILD_TYPE)
     SET(CMAKE_BUILD_TYPE Debug CACHE STRING
@@ -73,33 +75,7 @@ SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
 # SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})
 SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
 
-###############################################################################
-# Platform and compiler specific settings
 
-IF(WIN32)
-    IF(BUILD_SHARED_LIBS)
-        ADD_DEFINITIONS(-DBUILD_AS_DLL=1)
-    ENDIF()
-    IF(MSVC)
-        ADD_DEFINITIONS(/DW4)
-        if (NOT (MSVC_VERSION VERSION_LESS 1400))
-            ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
-            ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
-            ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNING)
-            ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
-        endif()
-    ENDIF(MSVC)
-ENDIF()
-
-IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
-    SET(COMPILE_FLAGS "-fPIC -Wall -Wno-long-long")
-    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMPILE_FLAGS} -std=c99")
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMPILE_FLAGS} -std=c++98")
-    IF(GEOTIFF_BUILD_PEDANTIC)
-        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
-    ENDIF()
-ENDIF()
 
 # Check required standard headers
 INCLUDE(CheckIncludeFiles)
@@ -108,90 +84,31 @@ CHECK_INCLUDE_FILES(strings.h GEOTIFF_HAVE_STRINGS_H)
 ###############################################################################
 # User-defined build settings
 
-SET(WITH_UTILITIES TRUE CACHE BOOL "Choose if GeoTIFF utilities should be built")
+option(WITH_UTILITIES "Choose if GeoTIFF utilities should be built" ON)
+
+SET(LIB_SUFFIX _i CACHE STRING "Static library suffix")
 
 ###############################################################################
 # Search for dependencies
 
-INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
-INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/libxtiff)
 
 # TIFF support - required, default=ON
-SET(WITH_TIFF TRUE CACHE BOOL "Choose if TIFF support should be built")
+option(WITH_TIFF "Choose if TIFF support should be built" ON)
 
 FIND_PACKAGE(PROJ NO_MODULE QUIET)
 if (NOT PROJ_FOUND)
-    FIND_PACKAGE(PROJ)
+  FIND_PACKAGE(PROJ REQUIRED)
 endif ()
 
-IF(PROJ_FOUND)
-    INCLUDE_DIRECTORIES(${PROJ_INCLUDE_DIR})
-ELSE()
-    MESSAGE(FATAL_ERROR "Failed to detect PROJ >= 6")
-ENDIF()
-
 # Zlib support - optional, default=OFF
-SET(WITH_ZLIB FALSE CACHE BOOL "Choose if zlib support should be built")
-
-IF(WITH_ZLIB)
-    FIND_PACKAGE(ZLIB NO_MODULE QUIET)
-    if (NOT ZLIB_FOUND)
-      FIND_PACKAGE(ZLIB)
-    endif ()
-
-    IF(ZLIB_FOUND)
-        SET(HAVE_ZIP 1)
-        INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_ZIP=${HAVE_ZIP})
-    ENDIF()
-ENDIF()
+option(WITH_ZLIB "Choose if zlib support should be built" OFF)
 
 # JPEG support - optional, default=OFF
-SET(WITH_JPEG FALSE CACHE BOOL "Choose if JPEG support should be built")
+option(WITH_JPEG  "Choose if JPEG support should be built" OFF)
 
-IF(WITH_JPEG)
-    FIND_PACKAGE(JPEG NO_MODULE QUIET)
-    if (NOT JPEG_FOUND)
-      FIND_PACKAGE(JPEG)
-    endif ()
-
-    IF(JPEG_FOUND)
-        SET(HAVE_JPEG 1)
-        INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_JPEG=${HAVE_JPEG})
-    ENDIF()
-ENDIF()
-
-IF(WITH_TIFF)
-    FIND_PACKAGE(TIFF NO_MODULE QUIET)
-    if (NOT TIFF_FOUND)
-      FIND_PACKAGE(TIFF REQUIRED)
-    endif ()
-
-    IF(TIFF_FOUND)
-        # Confirm required API is available
-        INCLUDE(CheckFunctionExists)
-        SET(CMAKE_REQUIRED_LIBRARIES ${TIFF_LIBRARIES})
-
-        CHECK_FUNCTION_EXISTS(TIFFOpen HAVE_TIFFOPEN)
-        IF(NOT HAVE_TIFFOPEN)
-            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
-            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFOpen function not found")
-        ENDIF()
-
-        CHECK_FUNCTION_EXISTS(TIFFMergeFieldInfo HAVE_TIFFMERGEFIELDINFO)
-        IF(NOT HAVE_TIFFMERGEFIELDINFO)
-            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
-            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFMergeFieldInfo function not found. libtiff 3.6.0 Beta or later required. Please upgrade or use an older version of libgeotiff")
-        ENDIF()
-
-        INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})
-        ADD_DEFINITIONS(-DHAVE_TIFF=1)
-    ENDIF(TIFF_FOUND)
-ENDIF(WITH_TIFF)
 
 # Turn off TOWGS84 support
-SET(WITH_TOWGS84 TRUE CACHE BOOL "Build with TOWGS84 support")
+option(WITH_TOWGS84 "Build with TOWGS84 support" ON)
 IF (NOT WITH_TOWGS84)
    SET(GEO_NORMALIZE_DISABLE_TOWGS84 1)
 endif()
@@ -244,21 +161,20 @@ SET(GEOTIFF_MAN_PAGES
 #    ${PROJECT_BINARY_DIR}/geotiff_version.h
 
 # Install doc files
-INSTALL(FILES
+if(BUILD_DOC)
+  INSTALL(FILES
     AUTHORS ChangeLog COPYING LICENSE README README_BIN README.WIN
     DESTINATION ${CMAKE_INSTALL_DOCDIR})
+endif ()
 
 # Install man pages
-INSTALL(FILES ${GEOTIFF_MAN_PAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
-
+if(BUILD_MAN)
+  INSTALL(FILES ${GEOTIFF_MAN_PAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
+endif ()
 
 # Install header files for development distribution
 INSTALL(FILES ${GEOTIFF_LIB_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
 
-###############################################################################
-# Build libxtiff library
-
-ADD_SUBDIRECTORY(libxtiff)
 
 ###############################################################################
 # Build libgeotiff library
@@ -290,8 +206,68 @@ endif ()
 ADD_LIBRARY(${GEOTIFF_LIBRARY_TARGET}
     ${GEOTIFF_LIB_SOURCES} ${XTIFF_SOURCES})
 
+set_property(TARGET ${GEOTIFF_LIBRARY_TARGET} PROPERTY CXX_STANDARD 98)
+set_property(TARGET ${GEOTIFF_LIBRARY_TARGET} PROPERTY C_STANDARD 99)
+set_property(TARGET ${GEOTIFF_LIBRARY_TARGET} PROPERTY POSITION_INDEPENDENT_CODE ON)
+set_property(TARGET ${GEOTIFF_LIBRARY_TARGET} PROPERTY OUTPUT_NAME ${GEOTIFF_LIB_NAME})
+
+IF(WITH_JPEG)
+    FIND_PACKAGE(JPEG NO_MODULE QUIET)
+    if (NOT JPEG_FOUND)
+      FIND_PACKAGE(JPEG)
+    endif ()
+
+    IF(JPEG_FOUND)
+        SET(HAVE_JPEG 1)
+        TARGET_INCLUDE_DIRECTORIES(${GEOTIFF_LIBRARY_TARGET} PRIVATE ${JPEG_INCLUDE_DIR})
+        target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -DHAVE_JPEG=${HAVE_JPEG})
+    ENDIF()
+ENDIF()
+
+
+IF(WITH_TIFF)
+    FIND_PACKAGE(TIFF NO_MODULE QUIET)
+    if (NOT TIFF_FOUND)
+      FIND_PACKAGE(TIFF REQUIRED)
+    endif ()
+
+    IF(TIFF_FOUND)
+        # Confirm required API is available
+        INCLUDE(CheckFunctionExists)
+        SET(CMAKE_REQUIRED_LIBRARIES ${TIFF_LIBRARIES})
+
+        CHECK_FUNCTION_EXISTS(TIFFOpen HAVE_TIFFOPEN)
+        IF(NOT HAVE_TIFFOPEN)
+            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
+            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFOpen function not found")
+        ENDIF()
+
+        CHECK_FUNCTION_EXISTS(TIFFMergeFieldInfo HAVE_TIFFMERGEFIELDINFO)
+        IF(NOT HAVE_TIFFMERGEFIELDINFO)
+            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library
+            MESSAGE(FATAL_ERROR "Failed to link with libtiff - TIFFMergeFieldInfo function not found. libtiff 3.6.0 Beta or later required. Please upgrade or use an older version of libgeotiff")
+        ENDIF()
+
+        TARGET_INCLUDE_DIRECTORIES(${GEOTIFF_LIBRARY_TARGET} PRIVATE ${TIFF_INCLUDE_DIR})
+        TARGET_COMPILE_DEFINITIONS(${GEOTIFF_LIBRARY_TARGET} PRIVATE -DHAVE_TIFF=1)
+    ENDIF(TIFF_FOUND)
+ENDIF(WITH_TIFF)
+
+IF(WITH_ZLIB)
+    FIND_PACKAGE(ZLIB REQUIRED )
+    IF(ZLIB_FOUND)
+        SET(HAVE_ZIP 1)
+        TARGET_INCLUDE_DIRECTORIES(${GEOTIFF_LIBRARY_TARGET} PRIVATE ${ZLIB_INCLUDE_DIR})
+        TARGET_COMPILE_DEFINITIONS(${GEOTIFF_LIBRARY_TARGET} PRIVATE -DHAVE_ZIP=${HAVE_ZIP})
+    ENDIF()
+ENDIF()
+
+TARGET_INCLUDE_DIRECTORIES(${GEOTIFF_LIBRARY_TARGET} PUBLIC
+                            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/>
+                            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/libxtiff>
+                            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 IF(WIN32 AND MSVC)
-    SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES IMPORT_SUFFIX "_i.lib")
+    SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES IMPORT_SUFFIX "${LIB_SUFFIX}.lib")
 ENDIF(WIN32 AND MSVC)
 
 # Unix, linux:
@@ -310,8 +286,31 @@ if(UNIX)
    endif()
 endif()
 
-SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES
-   OUTPUT_NAME ${GEOTIFF_LIB_NAME})
+###############################################################################
+# Platform and compiler specific settings
+
+IF(WIN32)
+    IF(BUILD_SHARED_LIBS)
+        target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -DBUILD_AS_DLL=1)
+    ENDIF()
+    IF(MSVC)
+        target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE /DW4)
+        if (NOT (MSVC_VERSION VERSION_LESS 1400))
+            target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -D_CRT_SECURE_NO_DEPRECATE)
+            target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -D_CRT_SECURE_NO_WARNINGS)
+            target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -D_CRT_NONSTDC_NO_WARNING)
+            target_compile_definitions(${GEOTIFF_LIBRARY_TARGET} PRIVATE -D_SCL_SECURE_NO_WARNINGS)
+        endif()
+    ENDIF(MSVC)
+ENDIF()
+
+IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
+    target_compile_options(${GEOTIFF_LIBRARY_TARGET} PRIVATE -Wall -Wno-long-long )
+    IF(GEOTIFF_BUILD_PEDANTIC)
+        target_compile_options(${GEOTIFF_LIBRARY_TARGET} PRIVATE -pedantic)
+    ENDIF()
+ENDIF()
+
 
 set(CONFIG_PUBLIC_DEPENDENCIES "")
 set(CONFIG_PRIVATE_DEPENDENCIES "")
@@ -324,15 +323,22 @@ target_link_libraries(${GEOTIFF_LIBRARY_TARGET} PUBLIC
 
 if(TARGET PROJ::proj)
     set(PROJ_LIBRARIES PROJ::proj)
-    string(APPEND CONFIG_PRIVATE_DEPENDENCIES "  find_dependency(PROJ CONFIG)\n")
+    string(APPEND CONFIG_PRIVATE_DEPENDENCIES "  find_dependency(PROJ)\n")
 endif()
+
+if(TARGET ZLIB::zlib)
+    set(ZLIB_LIBRARIES ZLIB::zlib)
+    string(APPEND CONFIG_PRIVATE_DEPENDENCIES "  find_dependency(ZLIB)\n")
+endif()
+
 target_link_libraries(${GEOTIFF_LIBRARY_TARGET} PRIVATE
-    ${PROJ_LIBRARIES})
+                      ${PROJ_LIBRARIES}
+                      ${TIFF_LIBRARIES}
+                      ${ZLIB_LIBRARIES})
 
-target_include_directories(
-  ${GEOTIFF_LIBRARY_TARGET}
-  PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
-         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+target_include_directories( ${GEOTIFF_LIBRARY_TARGET} PUBLIC
+            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
+            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 INSTALL( TARGETS ${GEOTIFF_LIBRARY_TARGET}
      EXPORT depends
@@ -340,6 +346,7 @@ INSTALL( TARGETS ${GEOTIFF_LIBRARY_TARGET}
      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} )
+INSTALL(FILES $<TARGET_PDB_FILE:${GEOTIFF_LIBRARY_TARGET}> DESTINATION ${CMAKE_INSTALL_BINDIR} OPTIONAL)
 
 # Install libgeotiff.pc
 set(prefix "${CMAKE_INSTALL_PREFIX}")
@@ -375,3 +382,16 @@ IF(WITH_UTILITIES)
 ENDIF()
 
 ADD_SUBDIRECTORY(cmake)
+
+message(STATUS "
+################################
+Summary of build options:
+   Build shared library:     ${BUILD_SHARED_LIBS}
+   Build man pages:          ${BUILD_MAN}
+   Build doc files:          ${BUILD_DOC}
+   Build GeoTIFF utilities:  ${WITH_UTILITIES}
+   Build TIFF support:       ${WITH_TIFF}
+   Build zlib support:       ${WITH_ZLIB}
+   Build JPEG support:       ${WITH_JPEG}
+   Build TOWGS84 support:    ${WITH_TOWGS84}
+################################")
diff --git a/libgeotiff/cmake/FindPROJ.cmake b/libgeotiff/cmake/FindPROJ.cmake
index f10a0fb..a20ba38 100644
--- a/libgeotiff/cmake/FindPROJ.cmake
+++ b/libgeotiff/cmake/FindPROJ.cmake
@@ -1,44 +1,91 @@
-###############################################################################
-# CMake module to search for PROJ library
-#
-# On success, the macro sets the following variables:
-# PROJ_FOUND       = if the library found
-# PROJ_LIBRARY     = full path to the library
-# PROJ_INCLUDE_DIR = where to find the library headers 
-# also defined, but not for general use are
-# PROJ_LIBRARY, where to find the PROJ library.
-#
-# Copyright (c) 2009 Mateusz Loskot <mateusz@loskot.net>
-#
-# Redistribution and use is allowed according to the terms of the BSD license.
-# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
-#
-###############################################################################
-
-# Try to use OSGeo4W installation
-IF(WIN32)
-    SET(PROJ4_OSGEO4W_HOME "C:/OSGeo4W") 
-
-    IF($ENV{OSGEO4W_HOME})
-        SET(PROJ4_OSGEO4W_HOME "$ENV{OSGEO4W_HOME}") 
-    ENDIF()
-ENDIF(WIN32)
-
-FIND_PATH(PROJ_INCLUDE_DIR proj.h proj_experimental.h
-    PATHS ${PROJ_OSGEO4W_HOME}/include
-    DOC "Path to PROJ library include directory")
-
-SET(PROJ_NAMES ${PROJ_NAMES} proj proj_i)
-FIND_LIBRARY(PROJ_LIBRARY
-    NAMES ${PROJ_NAMES}
-    PATHS ${PROJ_OSGEO4W_HOME}/lib
-    DOC "Path to PROJ library file")
-
-# Handle the QUIETLY and REQUIRED arguments and set PROJ_FOUND to TRUE
-# if all listed variables are TRUE
-INCLUDE(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(PROJ DEFAULT_MSG PROJ_LIBRARY PROJ_INCLUDE_DIR)
-
-IF(PROJ_FOUND)
-  SET(PROJ_LIBRARIES ${PROJ_LIBRARY})
-ENDIF()
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file COPYING-CMAKE-SCRIPTS or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindPROJ
+---------
+
+CMake module to search for PROJ(PROJ.4 and PROJ) library
+
+On success, the macro sets the following variables:
+``PROJ_FOUND``
+  if the library found
+
+``PROJ_LIBRARIES``
+  full path to the library
+
+``PROJ_INCLUDE_DIRS``
+  where to find the library headers
+
+``PROJ_VERSION_STRING``
+  version string of PROJ
+
+Copyright (c) 2009 Mateusz Loskot <mateusz@loskot.net>
+Copyright (c) 2015 NextGIS <info@nextgis.com>
+Copyright (c) 2018 Hiroshi Miura
+
+#]=======================================================================]
+
+find_path(PROJ_INCLUDE_DIR proj.h
+          PATHS ${PROJ_ROOT}/include
+          DOC "Path to PROJ library include directory")
+
+set(PROJ_NAMES ${PROJ_NAMES} proj proj_i)
+set(PROJ_NAMES_DEBUG ${PROJ_NAMES_DEBUG} projd proj_d)
+
+if(NOT PROJ_LIBRARY)
+  find_library(PROJ_LIBRARY_RELEASE NAMES ${PROJ_NAMES})
+  find_library(PROJ_LIBRARY_DEBUG NAMES ${PROJ_NAMES_DEBUG})
+  include(SelectLibraryConfigurations)
+  select_library_configurations(PROJ)
+  mark_as_advanced(PROJ_LIBRARY_RELEASE PROJ_LIBRARY_DEBUG)
+endif()
+
+unset(PROJ_NAMES)
+unset(PROJ_NAMES_DEBUG)
+
+if(PROJ_INCLUDE_DIR)
+    file(READ "${PROJ_INCLUDE_DIR}/proj.h" PROJ_H_CONTENTS)
+    string(REGEX REPLACE "^.*PROJ_VERSION_MAJOR +([0-9]+).*$" "\\1" PROJ_VERSION_MAJOR "${PROJ_H_CONTENTS}")
+    string(REGEX REPLACE "^.*PROJ_VERSION_MINOR +([0-9]+).*$" "\\1" PROJ_VERSION_MINOR "${PROJ_H_CONTENTS}")
+    string(REGEX REPLACE "^.*PROJ_VERSION_PATCH +([0-9]+).*$" "\\1" PROJ_VERSION_PATCH "${PROJ_H_CONTENTS}")
+    unset(PROJ_H_CONTENTS)
+    set(PROJ_VERSION_STRING "${PROJ_VERSION_MAJOR}.${PROJ_VERSION_MINOR}.${PROJ_VERSION_PATCH}")
+endif ()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PROJ
+                                  REQUIRED_VARS PROJ_LIBRARY PROJ_INCLUDE_DIR
+                                  VERSION_VAR PROJ_VERSION_STRING)
+mark_as_advanced(PROJ_INCLUDE_DIR PROJ_LIBRARY)
+
+if(PROJ_FOUND)
+  set(PROJ_LIBRARIES "${PROJ_LIBRARY}")
+  set(PROJ_INCLUDE_DIRS "${PROJ_INCLUDE_DIR}")
+  if(NOT TARGET PROJ::proj)
+    add_library(PROJ::proj UNKNOWN IMPORTED)
+    set_target_properties(PROJ::proj PROPERTIES
+                          INTERFACE_INCLUDE_DIRECTORIES "${PROJ_INCLUDE_DIR}"
+                          IMPORTED_LINK_INTERFACE_LANGUAGES "C")
+    if(EXISTS "${PROJ_LIBRARY}")
+      set_target_properties(PROJ::proj PROPERTIES
+        IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+        IMPORTED_LOCATION "${PROJ_LIBRARY}")
+    endif()
+    if(EXISTS "${PROJ_LIBRARY_RELEASE}")
+      set_property(TARGET PROJ::proj APPEND PROPERTY
+        IMPORTED_CONFIGURATIONS RELEASE)
+      set_target_properties(PROJ::proj PROPERTIES
+        IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
+        IMPORTED_LOCATION_RELEASE "${PROJ_LIBRARY_RELEASE}")
+    endif()
+    if(EXISTS "${PROJ_LIBRARY_DEBUG}")
+      set_property(TARGET PROJ::proj APPEND PROPERTY
+        IMPORTED_CONFIGURATIONS DEBUG)
+      set_target_properties(PROJ::proj PROPERTIES
+        IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
+        IMPORTED_LOCATION_DEBUG "${PROJ_LIBRARY_DEBUG}")
+    endif()
+  endif()
+endif()
+
