From 277f851b63eff28ffb582a802719cea39c2f4bce Mon Sep 17 00:00:00 2001
From: woho <woho@woho.woho>
Date: Fri, 22 Oct 2021 14:35:17 +0200
Subject: [PATCH 1/3] Image crop: Avoid unnecessary loop through corners

In the horizontal crop, we do not need to check the corners that were already
removed in the preceding vertical crop.
---
 src/gd_crop.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/gd_crop.c b/src/gd_crop.c
index 05a1dce17..b67a7478d 100644
--- a/src/gd_crop.c
+++ b/src/gd_crop.c
@@ -147,7 +147,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropAuto(gdImagePtr im, const unsigned int mode)
 
 	match = 1;
 	for (x = 0; match && x < width; x++) {
-		for (y = 0; match && y < crop.y + crop.height; y++) {
+		for (y = crop.y; match && y < crop.y + crop.height; y++) {
 			match = (color == gdImageGetPixel(im, x,y));
 		}
 	}
@@ -155,7 +155,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropAuto(gdImagePtr im, const unsigned int mode)
 
 	match = 1;
 	for (x = width - 1; match && x >= 0; x--) {
-		for (y = 0; match &&  y < crop.y + crop.height; y++) {
+		for (y = crop.y; match &&  y < crop.y + crop.height; y++) {
 			match = (color == gdImageGetPixel(im, x,y));
 		}
 	}
@@ -236,7 +236,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int c
 
 	match = 1;
 	for (x = 0; match && x < width; x++) {
-		for (y = 0; match && y < crop.y + crop.height; y++) {
+		for (y = crop.y; match && y < crop.y + crop.height; y++) {
 			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;
 		}
 	}
@@ -244,7 +244,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int c
 
 	match = 1;
 	for (x = width - 1; match && x >= 0; x--) {
-		for (y = 0; match &&  y < crop.y + crop.height; y++) {
+		for (y = crop.y; match &&  y < crop.y + crop.height; y++) {
 			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;
 		}
 	}

From 4410c49ead617e82cfbe48dbaf017629bfceaaf3 Mon Sep 17 00:00:00 2001
From: woho <woho@woho.woho>
Date: Fri, 22 Oct 2021 14:37:57 +0200
Subject: [PATCH 2/3] Image crop: Use goto

Using goto instead of the `match` helper variable makes the code easier to read
and has a tiny performance benefit.
---
 src/gd_crop.c | 123 ++++++++++++++++++++++++++++----------------------
 1 file changed, 68 insertions(+), 55 deletions(-)

diff --git a/src/gd_crop.c b/src/gd_crop.c
index b67a7478d..42af35709 100644
--- a/src/gd_crop.c
+++ b/src/gd_crop.c
@@ -87,8 +87,8 @@ BGD_DECLARE(gdImagePtr) gdImageCropAuto(gdImagePtr im, const unsigned int mode)
 	const int width = gdImageSX(im);
 	const int height = gdImageSY(im);
 
-	int x,y;
-	int color, match;
+	int x, y;
+	int color;
 	gdRect crop;
 
 	crop.x = 0;
@@ -119,47 +119,54 @@ BGD_DECLARE(gdImagePtr) gdImageCropAuto(gdImagePtr im, const unsigned int mode)
 		break;
 	}
 
-	/* TODO: Add gdImageGetRowPtr and works with ptr at the row level
-	 * for the true color and palette images
-	 * new formats will simply work with ptr
-	 */
-	match = 1;
-	for (y = 0; match && y < height; y++) {
-		for (x = 0; match && x < width; x++) {
-			match = (color == gdImageGetPixel(im, x,y));
+	for (x = 0, y = 0; y < height; y++) {
+		for (x = 0; x < width; x++) {
+			if (color != gdImageGetPixel(im, x, y)) {
+				goto break1;
+			}
 		}
 	}
+	break1:
 
 	/* Whole image would be cropped > bye */
-	if (match) {
+	if (y == height && x == width) {
 		return NULL;
 	}
 
-	crop.y = y - 1;
+	crop.y = y;
 
-	match = 1;
-	for (y = height - 1; match && y >= 0; y--) {
-		for (x = 0; match && x < width; x++) {
-			match = (color == gdImageGetPixel(im, x,y));
+	for (y = height - 1; y >= 0; y--) {
+		for (x = 0; x < width; x++) {
+			if (color != gdImageGetPixel(im, x, y)) {
+				goto break2;
+			}
 		}
 	}
-	crop.height = y - crop.y + 2;
+	break2:
 
-	match = 1;
-	for (x = 0; match && x < width; x++) {
-		for (y = crop.y; match && y < crop.y + crop.height; y++) {
-			match = (color == gdImageGetPixel(im, x,y));
+	crop.height = y - crop.y + 1;
+
+	for (x = 0; x < width; x++) {
+		for (y = crop.y; y < crop.y + crop.height; y++) {
+			if (color != gdImageGetPixel(im, x, y)) {
+				goto break3;
+			}
 		}
 	}
-	crop.x = x - 1;
+	break3:
+
+	crop.x = x;
 
-	match = 1;
-	for (x = width - 1; match && x >= 0; x--) {
-		for (y = crop.y; match &&  y < crop.y + crop.height; y++) {
-			match = (color == gdImageGetPixel(im, x,y));
+	for (x = width - 1; x >= 0; x--) {
+		for (y = crop.y; y < crop.y + crop.height; y++) {
+			if (color != gdImageGetPixel(im, x, y)) {
+				goto break4;
+			}
 		}
 	}
-	crop.width = x - crop.x + 2;
+	break4:
+
+	crop.width = x - crop.x + 1;
 
 	return gdImageCrop(im, &crop);
 }
@@ -190,8 +197,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int c
 	const int width = gdImageSX(im);
 	const int height = gdImageSY(im);
 
-	int x,y;
-	int match;
+	int x, y;
 	gdRect crop;
 
 	crop.x = 0;
@@ -199,7 +205,7 @@ BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int c
 	crop.width = 0;
 	crop.height = 0;
 
-	/* Pierre: crop everything sounds bad */
+	/* To crop everything sounds bad */
 	if (threshold > 100.0) {
 		return NULL;
 	}
@@ -208,47 +214,54 @@ BGD_DECLARE(gdImagePtr) gdImageCropThreshold(gdImagePtr im, const unsigned int c
 		return NULL;
 	}
 
-	/* TODO: Add gdImageGetRowPtr and works with ptr at the row level
-	 * for the true color and palette images
-	 * new formats will simply work with ptr
-	 */
-	match = 1;
-	for (y = 0; match && y < height; y++) {
-		for (x = 0; match && x < width; x++) {
-			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;
+	for (x = 0, y = 0; y < height; y++) {
+		for (x = 0; x < width; x++) {
+			if (!gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) {
+				goto break1;
+			}
 		}
 	}
+	break1:
 
 	/* Whole image would be cropped > bye */
-	if (match) {
+	if (y == height && x == width) {
 		return NULL;
 	}
 
-	crop.y = y - 1;
+	crop.y = y;
 
-	match = 1;
-	for (y = height - 1; match && y >= 0; y--) {
-		for (x = 0; match && x < width; x++) {
-			match = (gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) > 0;
+	for (y = height - 1; y >= 0; y--) {
+		for (x = 0; x < width; x++) {
+			if (!gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) {
+				goto break2;
+			}
 		}
 	}
-	crop.height = y - crop.y + 2;
+	break2:
 
-	match = 1;
-	for (x = 0; match && x < width; x++) {
-		for (y = crop.y; match && y < crop.y + crop.height; y++) {
-			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;
+	crop.height = y - crop.y + 1;
+
+	for (x = 0; x < width; x++) {
+		for (y = crop.y; y < crop.y + crop.height; y++) {
+			if (!gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) {
+				goto break3;
+			}
 		}
 	}
-	crop.x = x - 1;
+	break3:
+
+	crop.x = x;
 
-	match = 1;
-	for (x = width - 1; match && x >= 0; x--) {
-		for (y = crop.y; match &&  y < crop.y + crop.height; y++) {
-			match = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;
+	for (x = width - 1; x >= 0; x--) {
+		for (y = crop.y; y < crop.y + crop.height; y++) {
+			if (!gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) {
+				goto break4;
+			}
 		}
 	}
-	crop.width = x - crop.x + 2;
+	break4:
+
+	crop.width = x - crop.x + 1;
 
 	return gdImageCrop(im, &crop);
 }

From 13fe6cb91146437ae39e2c1890a32cf29723772e Mon Sep 17 00:00:00 2001
From: woho <woho@woho.woho>
Date: Fri, 22 Oct 2021 14:39:49 +0200
Subject: [PATCH 3/3] Performance: Use float multiplication instead of division

---
 src/gd_color.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gd_color.c b/src/gd_color.c
index ba0efd823..f2d845efc 100644
--- a/src/gd_color.c
+++ b/src/gd_color.c
@@ -18,7 +18,7 @@ int gdColorMatch(gdImagePtr im, int col1, int col2, float threshold)
 	const int da = gdImageAlpha(im, col1) - gdImageAlpha(im, col2);
 	const int dist = dr * dr + dg * dg + db * db + da * da;
 
-	return (100.0 * dist / 195075) < threshold;
+	return 100.0 * dist < threshold * 195075.0;
 }
 
 /*
