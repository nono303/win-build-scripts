 CMakeLists.txt        | 50 +++++++++++++++++++++++++++++++
 cmake/FindMySQL.cmake | 83 +++++++++++++++++++++++++++++++++++++++++++++++++++
 dbd/apr_dbd_mysql.c   | 12 +++++++-
 include/apu.hwc       |  2 +-
 4 files changed, 145 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6c3b6a5a..0ad34ddf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,9 +19,12 @@ PROJECT(APR-Util C)
 
 CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
 
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+
 FIND_PACKAGE(EXPAT)
 FIND_PACKAGE(LibXml2)
 FIND_PACKAGE(OpenSSL)
+FIND_PACKAGE(Iconv)
 
 IF(NOT EXPAT_FOUND AND NOT LIBXML2_FOUND)
   MESSAGE(FATAL_ERROR "Either Expat or LibXml2 is required, but neither was found")
@@ -37,6 +40,8 @@ ENDIF()
 
 OPTION(APU_HAVE_CRYPTO      "Crypto support"                            OFF)
 OPTION(APU_HAVE_ODBC        "Build ODBC DBD driver"                     ON)
+OPTION(APU_HAVE_SQLITE3     "Build SQlite3 DBD driver"                  ON)
+OPTION(APU_HAVE_MySQL       "Build MySQL DBD driver"                    ON)
 OPTION(APR_HAS_LDAP         "LDAP support"                              ON)
 OPTION(INSTALL_PDB          "Install .pdb files (if generated)"         ON)
 OPTION(APR_BUILD_TESTAPR    "Build the test suite"                      OFF)
@@ -74,6 +79,7 @@ ENDIF()
 
 SET(apu_have_crypto_10 0)
 SET(apu_have_apr_iconv_10 0) # not yet implemented
+SET(apu_have_iconv_10 0)
 SET(apr_has_ldap_10 0)
 SET(apu_use_libxml2_10 0)
 SET(apu_use_expat_10 0)
@@ -97,6 +103,11 @@ IF(APR_HAS_LDAP)
   SET(LDAP_LIBRARIES wldap32)
 ENDIF()
 
+IF(Iconv_FOUND)
+  SET(apu_have_iconv_10 1)
+  SET(APU_HAVE_ICONV ON)
+ENDIF()
+
 CONFIGURE_FILE(include/apu.hwc
               ${PROJECT_BINARY_DIR}/apu.h)
 CONFIGURE_FILE(include/apr_ldap.hwc
@@ -120,6 +131,10 @@ ELSE()
   SET(XMLLIB_LIBRARIES   "${LIBXML2_LIBRARIES};${LIBXML2_ICONV_LIBRARIES}")
 ENDIF()
 
+IF(APU_HAVE_ICONV)
+  SET(XMLLIB_INCLUDE_DIR "${XMLLIB_INCLUDE_DIR};${Iconv_INCLUDE_DIRS}")
+  SET(XMLLIB_LIBRARIES   "${XMLLIB_LIBRARIES};${Iconv_LIBRARIES}")
+ENDIF()
 
 # Generated .h files are stored in PROJECT_BINARY_DIR, not the
 # source tree.
@@ -276,6 +291,11 @@ SET(install_targets ${install_targets} aprutil-1)
 TARGET_LINK_LIBRARIES(aprutil-1 ${APR_LIBRARIES} ${XMLLIB_LIBRARIES})
 SET_TARGET_PROPERTIES(aprutil-1 PROPERTIES COMPILE_DEFINITIONS "APU_DECLARE_STATIC;APR_DECLARE_STATIC;APU_DSO_MODULE_BUILD;XML_STATIC")
 
+IF(APU_HAVE_ICONV)
+  SET_TARGET_PROPERTIES(aprutil-1 PROPERTIES COMPILE_FLAGS "-DHAVE_ICONV_H")
+  SET_TARGET_PROPERTIES(libaprutil-1 PROPERTIES COMPILE_FLAGS "-DHAVE_ICONV_H")
+ENDIF()
+
 IF(APU_HAVE_CRYPTO)
   IF(NOT OPENSSL_FOUND)
     MESSAGE(FATAL_ERROR "Only OpenSSL-based crypto is currently implemented in the cmake build")
@@ -300,6 +320,33 @@ IF(APU_HAVE_ODBC)
   SET_TARGET_PROPERTIES(apr_dbd_odbc-1 PROPERTIES COMPILE_FLAGS "-DAPR_DECLARE_IMPORT -DAPU_DECLARE_IMPORT -DDLL_NAME=apr_dbd_odbc")
 ENDIF()
 
+IF(APU_HAVE_SQLITE3)
+  FIND_PACKAGE(SQLite3)
+  ADD_LIBRARY(apr_dbd_sqlite3-1 SHARED dbd/apr_dbd_sqlite3.c libaprutil.rc)
+  SET(install_targets ${install_targets} apr_dbd_sqlite3-1)
+  SET(install_bin_pdb ${install_bin_pdb} ${PROJECT_BINARY_DIR}/apr_dbd_sqlite3-1.pdb)
+  SET(dbd_drivers ${dbd_drivers} sqlite3)
+  TARGET_LINK_LIBRARIES(apr_dbd_sqlite3-1 libaprutil-1 ${APR_LIBRARIES} ${SQLite3_LIBRARIES})
+  SET_PROPERTY(TARGET apr_dbd_sqlite3-1 APPEND PROPERTY LINK_FLAGS /export:apr_dbd_sqlite3_driver)
+  SET_TARGET_PROPERTIES(apr_dbd_sqlite3-1 PROPERTIES COMPILE_DEFINITIONS "APU_HAVE_SQLITE3;HAVE_SQL_H;APU_DECLARE_IMPORT;APR_DECLARE_IMPORT;APU_DSO_MODULE_BUILD;WINNT")
+  SET_TARGET_PROPERTIES(apr_dbd_sqlite3-1 PROPERTIES COMPILE_FLAGS "-DAPR_DECLARE_IMPORT -DAPU_DECLARE_IMPORT -DDLL_NAME=apr_dbd_sqlite3")
+  SET_TARGET_PROPERTIES(apr_dbd_sqlite3-1 PROPERTIES INCLUDE_DIRECTORIES "${APR_INCLUDE_DIRECTORIES};${SQLite3_INCLUDE_DIRS}")
+ENDIF()
+
+IF(APU_HAVE_MYSQL)
+  FIND_PACKAGE(MySQL)
+  ADD_LIBRARY(apr_dbd_mysql-1 SHARED dbd/apr_dbd_mysql.c libaprutil.rc)
+  SET(install_targets ${install_targets} apr_dbd_mysql-1)
+  SET(install_bin_pdb ${install_bin_pdb} ${PROJECT_BINARY_DIR}/apr_dbd_mysql-1.pdb)
+  SET(dbd_drivers ${dbd_drivers} mysql)
+  TARGET_LINK_LIBRARIES(apr_dbd_mysql-1 libaprutil-1 ${APR_LIBRARIES} ${MYSQL_LIBRARY})
+  SET_PROPERTY(TARGET apr_dbd_mysql-1 APPEND PROPERTY LINK_FLAGS /export:apr_dbd_mysql_driver)
+  SET_TARGET_PROPERTIES(apr_dbd_mysql-1 PROPERTIES COMPILE_DEFINITIONS "APU_HAVE_MYSQL;HAVE_SQL_H;APU_DECLARE_IMPORT;APR_DECLARE_IMPORT;APU_DSO_MODULE_BUILD;WINNT")
+  SET_TARGET_PROPERTIES(apr_dbd_mysql-1 PROPERTIES COMPILE_FLAGS "-DAPR_DECLARE_IMPORT -DAPU_DECLARE_IMPORT -DDLL_NAME=apr_dbd_mysql")
+  SET_TARGET_PROPERTIES(apr_dbd_mysql-1 PROPERTIES INCLUDE_DIRECTORIES "${APR_INCLUDE_DIRECTORIES};${MYSQL_INCLUDE_DIR}")
+
+ENDIF()
+
 IF(APR_HAS_LDAP)
   ADD_LIBRARY(apr_ldap-1 SHARED ldap/apr_ldap_init.c ldap/apr_ldap_option.c 
               ldap/apr_ldap_rebind.c libaprutil.rc)
@@ -387,7 +434,10 @@ MESSAGE(STATUS "  C compiler ...................... : ${CMAKE_C_COMPILER}")
 MESSAGE(STATUS "  APR include directory ........... : ${APR_INCLUDE_DIR}")
 MESSAGE(STATUS "  APR libraries ................... : ${APR_LIBRARIES}")
 MESSAGE(STATUS "  DBD ODBC driver ................. : ${APU_HAVE_ODBC}")
+MESSAGE(STATUS "  DBD SQlite3 driver .............. : ${APU_HAVE_SQLITE3}")
+MESSAGE(STATUS "  DBD MySQL driver ................ : ${APU_HAVE_MYSQL}")
 MESSAGE(STATUS "  APU_HAVE_CRYPTO ................. : ${APU_HAVE_CRYPTO}")
+MESSAGE(STATUS "  APU_HAVE_ICONV .................. : ${APU_HAVE_ICONV}")
 MESSAGE(STATUS "  APR_HAS_LDAP .................... : ${APR_HAS_LDAP}")
 MESSAGE(STATUS "  Use Expat ....................... : ${APU_USE_EXPAT}")
 MESSAGE(STATUS "  Use LibXml2 ..................... : ${APU_USE_LIBXML2}")
diff --git a/cmake/FindMySQL.cmake b/cmake/FindMySQL.cmake
new file mode 100644
index 00000000..99d1c61e
--- /dev/null
+++ b/cmake/FindMySQL.cmake
@@ -0,0 +1,83 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file COPYING-CMAKE-SCRIPTS or https://cmake.org/licensing for details.
+
+#.rst
+# Get from http://www.cmake.org/Wiki/CMakeUserFindMySQL
+# - Find mysqlclient
+# Find the native MySQL includes and library
+#
+#  MYSQL_INCLUDE_DIRS- where to find mysql.h, etc.
+#  MYSQL_LIBRARIES   - List of libraries when using MySQL.
+#  MYSQL_FOUND       - True if MySQL found.
+
+find_path(MYSQL_INCLUDE_DIR
+          NAMES mysql.h
+          PATH_SUFFIXES mysql
+          DOC "MySQL Client library includes")
+
+if( MYSQL_INCLUDE_DIR AND EXISTS "${MYSQL_INCLUDE_DIR}/mysql_version.h" )
+    file( STRINGS "${MYSQL_INCLUDE_DIR}/mysql_version.h"
+          MYSQL_VERSION_H REGEX "^#define[ \t]+MYSQL_SERVER_VERSION[ \t]+\"[^\"]+\".*$" )
+    string( REGEX REPLACE
+            "^.*MYSQL_SERVER_VERSION[ \t]+\"([^\"]+)\".*$" "\\1" MYSQL_VERSION_STRING
+            "${MYSQL_VERSION_H}" )
+endif()
+
+find_library(MYSQL_LIBRARY NAMES mysqlclient mysqlclient_r)
+
+if( NOT CMAKE_C_COMPILER_LOADED )
+    message(AUTHOR_WARNING "C language not enabled: Skipping detection of extra link libraries.")
+elseif( MYSQL_INCLUDE_DIR AND MYSQL_LIBRARY )
+    # On Conda, mysqlclient is a static lib that requires explicit linking to zlib and zstd
+    function(check_mysql_test_program_links)
+        include(CheckCSourceCompiles)
+        include(CMakePushCheckState)
+        cmake_push_check_state(RESET)
+        set(CMAKE_REQUIRED_QUIET "yes")
+        set(CMAKE_REQUIRED_INCLUDES ${MYSQL_INCLUDE_DIR})
+        set(CMAKE_REQUIRED_LIBRARIES ${MYSQL_LIBRARY})
+        check_c_source_compiles("#include <mysql.h>\n; int main () {mysql_library_end (); return 0;}" MYSQL_TEST_PROGRAM_LINKS)
+        cmake_pop_check_state()
+    endfunction()
+
+    check_mysql_test_program_links()
+    if(NOT MYSQL_TEST_PROGRAM_LINKS)
+       find_library(_MYSQL_ZLIB_LIBRARY NAMES zlib)
+       find_library(_MYSQL_ZSTD_LIBRARY NAMES zstd)
+       if(_MYSQL_ZLIB_LIBRARY AND _MYSQL_ZSTD_LIBRARY)
+            function(check_mysql_test_program_links_with_zlib_and_zstd)
+                include(CheckCSourceCompiles)
+                include(CMakePushCheckState)
+                cmake_push_check_state(RESET)
+                set(CMAKE_REQUIRED_QUIET "yes")
+                set(CMAKE_REQUIRED_INCLUDES ${MYSQL_INCLUDE_DIR})
+                set(CMAKE_REQUIRED_LIBRARIES ${MYSQL_LIBRARY} ${_MYSQL_ZSTD_LIBRARY} ${_MYSQL_ZLIB_LIBRARY})
+                check_c_source_compiles("#include <mysql.h>\n;int main () {mysql_library_end (); return 0;}" MYSQL_TEST_PROGRAM_LINKS_WITH_ZLIB_AND_ZSTD)
+                cmake_pop_check_state()
+            endfunction()
+
+            check_mysql_test_program_links_with_zlib_and_zstd()
+            if(MYSQL_TEST_PROGRAM_LINKS_WITH_ZLIB_AND_ZSTD)
+              set(MYSQL_ZSTD_LIBRARY ${_MYSQL_ZSTD_LIBRARY})
+              set(MYSQL_ZLIB_LIBRARY ${_MYSQL_ZLIB_LIBRARY})
+            endif()
+       endif()
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(MySQL
+                                  FOUND_VAR MYSQL_FOUND
+                                  REQUIRED_VARS MYSQL_LIBRARY MYSQL_INCLUDE_DIR
+                                  VERSION_VAR MYSQL_VERSION_STRING)
+include(FeatureSummary)
+set_package_properties(MYSQL PROPERTIES
+                       DESCRIPTION "MySQL Client library"
+                       URL "https://dev.mysql.com/downloads/c-api/"
+                       )
+
+mark_as_advanced(MYSQL_LIBRARY MYSQL_INCLUDE_DIR)
+
+set(MYSQL_LIBRARIES ${MYSQL_LIBRARY} ${MYSQL_ZSTD_LIBRARY} ${MYSQL_ZLIB_LIBRARY})
+set(MYSQL_INCLUDE_DIRS ${MYSQL_INCLUDE_DIR})
+
diff --git a/dbd/apr_dbd_mysql.c b/dbd/apr_dbd_mysql.c
index d3e938c3..3bd19d54 100644
--- a/dbd/apr_dbd_mysql.c
+++ b/dbd/apr_dbd_mysql.c
@@ -50,6 +50,15 @@
 
 #include "apr_dbd_internal.h"
 
+/* https://www.apachelounge.com/viewtopic.php?p=42414#42414
+* MySQL 8.0 replaces my_bool with C99 bool. Earlier versions of MySQL had
+* a typedef to char. Gem users reported failures on big endian systems when
+* using C99 bool types with older MySQLs due to mismatched behavior. */
+#ifndef HAVE_TYPE_MY_BOOL
+#include <stdbool.h>
+typedef bool my_bool;
+#endif
+
 /* default maximum field size 1 MB */
 #define FIELDSIZE 1048575
 
@@ -1262,7 +1271,8 @@ static apr_status_t thread_end(void *data)
 
 static void dbd_mysql_init(apr_pool_t *pool)
 {
-#if MYSQL_VERSION_ID < 100000
+/* https://www.apachelounge.com/viewtopic.php?p=42414#42414 */
+#if MYSQL_VERSION_ID < 80020
     my_init();
 #endif
     mysql_thread_init();
diff --git a/include/apu.hwc b/include/apu.hwc
index fe13b66b..937e0542 100644
--- a/include/apu.hwc
+++ b/include/apu.hwc
@@ -138,7 +138,7 @@
 #endif
 
 #define APU_HAVE_APR_ICONV      @apu_have_apr_iconv_10@
-#define APU_HAVE_ICONV          0
+#define APU_HAVE_ICONV          @apu_have_iconv_10@
 #define APR_HAS_XLATE           (APU_HAVE_APR_ICONV || APU_HAVE_ICONV)
 
 #define APU_USE_EXPAT           @apu_use_expat_10@
