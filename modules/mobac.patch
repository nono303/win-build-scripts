Index: gradle/wrapper/gradle-wrapper.properties
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision 2563)
+++ gradle/wrapper/gradle-wrapper.properties	(working copy)
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.8.2-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: mobac/build.gradle
===================================================================
--- mobac/build.gradle	(revision 2563)
+++ mobac/build.gradle	(working copy)
@@ -2,9 +2,17 @@
     id 'java-library'
     id 'edu.sc.seis.launch4j' version '2.4.9'
 }
+repositories {
+    jcenter()
+    gradlePluginPortal()
+    maven {
+        url "https://repo1.maven.org/maven2/"
+        url "https://jitpack.io"
+    }
+}
 
 dependencies {
-    def mapsforgeVersion = '0.9.1'
+    def mapsforgeVersion = '0.15.0'
 
     implementation "org.mapsforge:mapsforge-core:${mapsforgeVersion}"
     implementation "org.mapsforge:mapsforge-map:${mapsforgeVersion}"
Index: mobac/src/main/java/mobac/gui/MainGUI.java
===================================================================
--- mobac/src/main/java/mobac/gui/MainGUI.java	(revision 2563)
+++ mobac/src/main/java/mobac/gui/MainGUI.java	(working copy)
@@ -163,7 +163,7 @@
 	private static Color checkboxBackgroundColor = new Color(0, 0, 0, 40);
 	private static Color labelForegroundColor = Color.WHITE;
 
-	public static final int LEFT_PANEL_MIN_SIZE = 254;
+	public static final int LEFT_PANEL_MIN_SIZE = 270;
 
 	private static final int LEFT_PANEL_MARGIN = 2;
 
@@ -737,6 +737,7 @@
 		addLayers.addActionListener(AddMapLayer.INSTANCE);
 		atlasContentPanel.addContent(new JLabel(I18nUtils.localizedStringForKey("lp_atlas_name_label_title")), gbc_std);
 		atlasContentPanel.addContent(atlasNameTextField, gbc_eol.fill(GBC.HORIZONTAL));
+		atlasContentPanel.setPreferredSize(new Dimension(100, 150));
 
 		leftPanelContent = new JPanel(new GridBagLayout());
 		leftPanelContent.add(mapSourcePanel, gbc_eol);
Index: mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java
===================================================================
--- mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(revision 2563)
+++ mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(working copy)
@@ -45,7 +45,7 @@
 		JScrollPane mapSourceTreeScrollPane = new JScrollPane(mapSourceTree, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
 				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 200));
+		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 550));
 		mapSourceTreeScrollPane.setAutoscrolls(true);
 		addContent(mapSourceTreeScrollPane, GBC.eol().fill().insets(0, 1, 0, 0));
 	}
Index: mobac/src/main/java/mobac/gui/settings/SettingsGUI.java
===================================================================
--- mobac/src/main/java/mobac/gui/settings/SettingsGUI.java	(revision 2563)
+++ mobac/src/main/java/mobac/gui/settings/SettingsGUI.java	(working copy)
@@ -97,7 +97,7 @@
 
 	private static final Logger LOG = Logger.getLogger(SettingsGUI.class);
 
-	private static final Integer[] THREADCOUNT_LIST = { 1, 2, 4, 6 };
+	private static final Integer[] THREADCOUNT_LIST = { 1, 2, 4, 6, 12, 24 };
 
 	private static final long MBIT1 = 1000000 / 8;
 
Index: mobac/src/main/java/mobac/program/download/MobacTrustManager.java
===================================================================
--- mobac/src/main/java/mobac/program/download/MobacTrustManager.java	(revision 2563)
+++ mobac/src/main/java/mobac/program/download/MobacTrustManager.java	(working copy)
@@ -97,7 +97,7 @@
 			defaultTrustManager.checkServerTrusted(chain, authType);
 		} catch (CertificateException e) {
 			X509Certificate cert = chain[0]; // get the leaf certificate
-			log.error("SSL error: " + e.getMessage());
+			log.debug("SSL error: " + e.getMessage());
 			synchronized (this) {
 				String pubKeySha256Hash = getPublicKeySha256Hash(cert);
 				if (isCertificateTrusted(pubKeySha256Hash)) {
@@ -106,7 +106,8 @@
 				// TODO: Add GUI for manually adding this certificate as trusted.
 				String message = "Untrusted certificate encountered: publicKeyHash=\"" + pubKeySha256Hash
 						+ "\"; certificate issued for " + cert.getSubjectDN();
-				throw new CertificateException(message);
+				// throw new CertificateException(message);
+				log.debug(message);
 			}
 		}
 	}
