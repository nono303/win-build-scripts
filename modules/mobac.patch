Index: build.gradle
===================================================================
--- build.gradle	(revision 2741)
+++ build.gradle	(working copy)
@@ -4,9 +4,10 @@
 
 plugins {
     id 'distribution'
-    id "at.bxm.svntools" version "2.2.1"
-    id 'org.gradle.crypto.checksum' version '1.1.0'
-    id 'com.diffplug.spotless' version '6.8.0'
+    id "at.bxm.svntools" version "3.1"
+    id 'org.gradle.crypto.checksum' version '1.4.0'
+    id 'com.diffplug.spotless' version '6.18.0'
+    id 'nebula.lint' version "18.0.3"
 }
 
 group 'mobac.sourceforge.io'
@@ -16,12 +17,11 @@
 
 allprojects {
     repositories {
-        mavenCentral()
         maven {
             // required for javax.media:jai-core:1.1.3 and com.sun.media:jai-codec:1.1.3
-            url "https://repository.jboss.org/maven2"
+            url "https://repo.osgeo.org/repository/release"
         }
-
+        mavenCentral()
         // maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
     }
     ext {
Index: gradle/wrapper/gradle-wrapper.properties
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision 2741)
+++ gradle/wrapper/gradle-wrapper.properties	(working copy)
@@ -1,5 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
+networkTimeout=10000
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: mobac/build.gradle
===================================================================
--- mobac/build.gradle	(revision 2741)
+++ mobac/build.gradle	(working copy)
@@ -4,8 +4,7 @@
 }
 
 dependencies {
-    def mapsforgeVersion = '0.18.0'
-    // def mapsforgeVersion = 'master-SNAPSHOT'
+    def mapsforgeVersion = '+'
 
     implementation "org.mapsforge:mapsforge-core:${mapsforgeVersion}"
     implementation "org.mapsforge:mapsforge-map:${mapsforgeVersion}"
@@ -12,29 +11,29 @@
     implementation "org.mapsforge:mapsforge-map-awt:${mapsforgeVersion}"
     implementation "org.mapsforge:mapsforge-map-reader:${mapsforgeVersion}"
     implementation "org.mapsforge:mapsforge-themes:${mapsforgeVersion}"
-    api 'org.apache-extras.beanshell:bsh:2.0b6'
-    api 'commons-codec:commons-codec:1.15'
-    api 'commons-io:commons-io:2.11.0'
-    api 'org.apache.commons:commons-lang3:3.12.0'
-    api 'org.apache.commons:commons-text:1.9'
-    api 'com.github.kerner1000:javapng:2.1.2'
-    api 'org.xerial:sqlite-jdbc:3.34.0'
-    api 'com.sleepycat:je:5.0.73'
-    api 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
-    api 'org.slf4j:slf4j-api:1.7.36'
-    implementation 'com.twelvemonkeys.imageio:imageio-webp:3.9.4'
-    implementation 'ch.qos.logback:logback-classic:1.2.11'
-    implementation 'org.slf4j:jul-to-slf4j:1.7.36'
-    implementation 'net.sf.jtidy:jtidy:r938'
-    implementation 'com.itextpdf:itextpdf:5.1.3'
-    implementation 'javax.media:jai-core:1.1.3'
-    implementation 'com.sun.media:jai-codec:1.1.3'
-    testImplementation 'org.jboss.resteasy:tjws:2.3.10.Final'
-    testImplementation 'junit:junit:4.13.2'
-    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
-    testImplementation 'javax.servlet:servlet-api:2.5'
+    api 'org.apache-extras.beanshell:bsh:+'
+    api 'commons-codec:commons-codec:+'
+    api 'commons-io:commons-io:+'
+    api 'org.apache.commons:commons-lang3:+'
+    api 'org.apache.commons:commons-text:+'
+    api 'com.github.kerner1000:javapng:+'
+    api 'org.xerial:sqlite-jdbc:+'
+    api 'com.sleepycat:je:+'
+    api 'org.glassfish.jaxb:jaxb-runtime:+'
+    api 'org.slf4j:slf4j-api:+'
+    implementation 'com.twelvemonkeys.imageio:imageio-webp:+'
+    implementation 'ch.qos.logback:logback-classic:+'
+    implementation 'org.slf4j:jul-to-slf4j:+'
+    implementation 'net.sf.jtidy:jtidy:+'
+    implementation 'com.itextpdf:itextpdf:+'
+    implementation 'javax.media:jai-core:+'
+    implementation 'com.sun.media:jai-codec:+'
+    testImplementation 'org.jboss.resteasy:tjws:+'
+    testImplementation 'junit:junit:+'
+    testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
+    testImplementation 'javax.servlet:servlet-api:+'
 
-    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
+    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
 }
 processResources {
     doLast {
@@ -101,4 +100,6 @@
 
 test {
     useJUnitPlatform()
-}
\ No newline at end of file
+}
+
+// gradleLint.rules = ['all-dependency']
\ No newline at end of file
Index: mobac/src/main/java/mobac/gui/components/JMapSizeCombo.java
===================================================================
--- mobac/src/main/java/mobac/gui/components/JMapSizeCombo.java	(revision 2741)
+++ mobac/src/main/java/mobac/gui/components/JMapSizeCombo.java	(working copy)
@@ -34,15 +34,10 @@
 	static {
 		// Sizes from 1024 to 32768
 		MAP_SIZE_VALUES = new Vector<Integer>(11);
-		MAP_SIZE_VALUES.addElement(128000);
+		MAP_SIZE_VALUES.addElement(DEFAULT = 4194303);;
 		MAP_SIZE_VALUES.addElement(1048575);
 		MAP_SIZE_VALUES.addElement(65536);
-		MAP_SIZE_VALUES.addElement(DEFAULT = 32767);
-		MAP_SIZE_VALUES.addElement(30000);
-		MAP_SIZE_VALUES.addElement(25000);
-		MAP_SIZE_VALUES.addElement(20000);
-		MAP_SIZE_VALUES.addElement(15000);
-		MAP_SIZE_VALUES.addElement(10000);
+		MAP_SIZE_VALUES.addElement(32767);
 		MAP_SIZE_VALUES.addElement(2048);
 		MAP_SIZE_VALUES.addElement(1024);
 	}
Index: mobac/src/main/java/mobac/gui/MainGUI.java
===================================================================
--- mobac/src/main/java/mobac/gui/MainGUI.java	(revision 2741)
+++ mobac/src/main/java/mobac/gui/MainGUI.java	(working copy)
@@ -151,7 +151,7 @@
 
 public class MainGUI extends JFrame implements MapEventListener {
 
-	public static final int LEFT_PANEL_MIN_SIZE = 254;
+	public static final int LEFT_PANEL_MIN_SIZE = 270;
 	public static final ArrayList<Image> MOBAC_ICONS = new ArrayList<Image>(3);
 	private static final long serialVersionUID = 1L;
 	private static final int LEFT_PANEL_MARGIN = 2;
@@ -725,6 +725,7 @@
 		addLayers.addActionListener(AddMapLayer.INSTANCE);
 		atlasContentPanel.addContent(new JLabel(I18nUtils.localizedStringForKey("lp_atlas_name_label_title")), gbc_std);
 		atlasContentPanel.addContent(atlasNameTextField, gbc_eol.fill(GBC.HORIZONTAL));
+		atlasContentPanel.setPreferredSize(new Dimension(100, 150));
 
 		leftPanelContent = new JPanel(new GridBagLayout());
 		leftPanelContent.add(mapSourcePanel, gbc_eol);
Index: mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java
===================================================================
--- mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(revision 2741)
+++ mobac/src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(working copy)
@@ -43,7 +43,7 @@
 		JScrollPane mapSourceTreeScrollPane = new JScrollPane(mapSourceTree, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
 				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 200));
+		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 550));
 		mapSourceTreeScrollPane.setAutoscrolls(true);
 		addContent(mapSourceTreeScrollPane, GBC.eol().fill().insets(0, 1, 0, 0));
 	}
Index: mobac/src/main/java/mobac/gui/settings/SettingsGUI.java
===================================================================
--- mobac/src/main/java/mobac/gui/settings/SettingsGUI.java	(revision 2741)
+++ mobac/src/main/java/mobac/gui/settings/SettingsGUI.java	(working copy)
@@ -95,7 +95,7 @@
 
 	private static final Logger LOG = LoggerFactory.getLogger(SettingsGUI.class);
 
-	private static final Integer[] THREADCOUNT_LIST = {1, 2, 4, 6};
+	private static final Integer[] THREADCOUNT_LIST = { 1, 2, 4, 6, 12, 24 };
 
 	private static final long MBIT1 = 1000000 / 8;
 	private final Settings settings = Settings.getInstance();
Index: mobac/src/main/java/mobac/program/AtlasThread.java
===================================================================
--- mobac/src/main/java/mobac/program/AtlasThread.java	(revision 2741)
+++ mobac/src/main/java/mobac/program/AtlasThread.java	(working copy)
@@ -203,13 +203,13 @@
 			}
 		}
 
-		if (totalNrOfOnlineTiles > 500000) {
+		/* if (totalNrOfOnlineTiles > 500000) {
 			JOptionPane.showMessageDialog(null,
 					String.format(I18nUtils.localizedStringForKey("msg_too_many_tiles_msg"), 500000,
 							totalNrOfOnlineTiles),
 					I18nUtils.localizedStringForKey("msg_too_many_tiles_title"), JOptionPane.ERROR_MESSAGE);
 			return;
-		}
+		} */
 		try {
 			atlasCreator.startAtlasCreation(atlas, customAtlasDir);
 		} catch (AtlasTestException e) {
Index: mobac/src/main/java/mobac/program/download/MobacTrustManager.java
===================================================================
--- mobac/src/main/java/mobac/program/download/MobacTrustManager.java	(revision 2741)
+++ mobac/src/main/java/mobac/program/download/MobacTrustManager.java	(working copy)
@@ -128,7 +128,7 @@
 			defaultTrustManager.checkServerTrusted(chain, authType);
 		} catch (CertificateException e) {
 			X509Certificate cert = chain[0]; // get the leaf certificate
-			log.error("SSL error: {}", e.getMessage());
+			log.debug("SSL error: {}", e.getMessage());
 			synchronized (this) {
 				String pubKeySha256Hash = getPublicKeySha256Hash(cert);
 				if (isCertificateTrusted(pubKeySha256Hash)) {
@@ -137,10 +137,10 @@
 				// TODO: Add GUI for manually adding this certificate as trusted.
 				String message = "Untrusted certificate encountered: publicKeyHash=\"" + pubKeySha256Hash
 						+ "\"; certificate issued for " + cert.getSubjectX500Principal();
-				throw new CertificateException(message);
+				log.debug(message);
 			}
 		}
-	}
+	} 
 	private boolean isCertificateTrusted(String pubKeySha256Hash) {
 		if (additionalTrustedPublicKeys != null) {
