Index: build.xml
===================================================================
--- build.xml	(revision 2475)
+++ build.xml	(working copy)
@@ -3,9 +3,6 @@
 	<property file="src/main/resources/mobac/mobac.properties" />
 
 	<property name="rev.prop.file" value="src/main/resources/mobac/mobac-rev.properties" />
-	<property name="jar.name" value="Mobile_Atlas_Creator.jar" />
-	<property name="zip.name" value="Mobile Atlas Creator ${mobac.version}.zip" />
-	<property name="zip_src.name" value="Mobile Atlas Creator ${mobac.version} src.zip" />
 	<property name="main.class" value="mobac.StartMOBAC" />
 
 	<property name="rtlibraryjar.non_osx" value="${java.home}/lib/rt.jar" />
@@ -215,6 +212,9 @@
 		</condition>
 		<echo message="MOBAC revision: ${mobac.revision.new}" />
 		<antcall target="svnversion_write_property_file" />
+		<property name="jar.name" value="Mobile_Atlas_Creator_${mobac.revision.new}.jar" />
+		<property name="zip.name" value="Mobile Atlas Creator ${mobac.version}-${mobac.revision.new}.zip" />
+		<property name="zip_src.name" value="Mobile Atlas Creator ${mobac.version}-${mobac.revision.new} src.zip" />
 	</target>
 
 	<target name="svnversion_write_property_file" unless="mobac.revision.exported">
Index: src/main/java/mobac/exceptions/DownloadFailedException.java
===================================================================
--- src/main/java/mobac/exceptions/DownloadFailedException.java	(revision 2475)
+++ src/main/java/mobac/exceptions/DownloadFailedException.java	(working copy)
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
+import mobac.utilities.Utilities;
 
 import org.apache.log4j.Logger;
 
@@ -27,6 +28,7 @@
 
 	private final HttpURLConnection connection;
 	private final byte[] responseData;
+	private final boolean typeImage;
 
 	public DownloadFailedException(HttpURLConnection connection, byte[] responseData) throws IOException {
 		this(connection, responseData, null);
@@ -37,6 +39,11 @@
 		super("HTTP error: " + connection.getResponseCode(), cause);
 		this.connection = connection;
 		this.responseData = responseData;
+		if (Utilities.getImageType(responseData) == null){
+			this.typeImage = false;
+		} else {
+			this.typeImage = true;
+		}
 	}
 
 	public int getHttpResponseCode() {
@@ -47,6 +54,10 @@
 		}
 	}
 
+	public boolean isTypeImage() {
+		return typeImage;
+	}
+
 	public byte[] getResponseData() {
 		return responseData;
 	}
@@ -53,9 +64,22 @@
 
 	public String generateReponseErrorText() {
 		try {
-			return "HTTP " + connection.getResponseCode() + " " + connection.getResponseMessage();
-		} catch (IOException e) {
-			log.error("Failed to generate generate reponse error text", e);
+			String contentType = connection.getContentType();
+			String payload = "";
+			if(responseData != null && (contentType.startsWith("text/html") || contentType.startsWith("application/xml") || contentType.startsWith("application/json"))){
+				String stringdata = new String(responseData);
+				payload = stringdata.replace("<br>",System.getProperty("line.separator"));
+			}
+			return 
+				connection.getURL()
+				+System.getProperty("line.separator")
+				+"> " + connection.getResponseCode() + " " + connection.getResponseMessage()
+				+System.getProperty("line.separator")
+				+": " + contentType
+				+System.getProperty("line.separator")
+				+payload
+				;
+		} catch (Exception e) {
 			return "Unknown error";
 		}
 	}
Index: src/main/java/mobac/gui/MainGUI.java
===================================================================
--- src/main/java/mobac/gui/MainGUI.java	(revision 2475)
+++ src/main/java/mobac/gui/MainGUI.java	(working copy)
@@ -163,7 +163,7 @@
 	private static Color checkboxBackgroundColor = new Color(0, 0, 0, 40);
 	private static Color labelForegroundColor = Color.WHITE;
 
-	public static final int LEFT_PANEL_MIN_SIZE = 254;
+	public static final int LEFT_PANEL_MIN_SIZE = 270;
 
 	private static final int LEFT_PANEL_MARGIN = 2;
 
@@ -737,6 +737,7 @@
 		addLayers.addActionListener(AddMapLayer.INSTANCE);
 		atlasContentPanel.addContent(new JLabel(I18nUtils.localizedStringForKey("lp_atlas_name_label_title")), gbc_std);
 		atlasContentPanel.addContent(atlasNameTextField, gbc_eol.fill(GBC.HORIZONTAL));
+		atlasContentPanel.setPreferredSize(new Dimension(100, 150));
 
 		leftPanelContent = new JPanel(new GridBagLayout());
 		leftPanelContent.add(mapSourcePanel, gbc_eol);
Index: src/main/java/mobac/gui/mapview/Tile.java
===================================================================
--- src/main/java/mobac/gui/mapview/Tile.java	(revision 2475)
+++ src/main/java/mobac/gui/mapview/Tile.java	(working copy)
@@ -185,6 +185,16 @@
 		tileState = TileState.TS_ERROR;
 	}
 
+	public void setErrorImage(byte[] imageData) {
+		try {
+			image = ImageIO.read(new ByteArrayInputStream(imageData));
+		} catch (IOException e) {
+			log.error("Failed to setErrorImage with payload data", e);
+			image = ERROR_IMAGE;
+		}
+		tileState = TileState.TS_ERROR;
+    }
+
 	public String getErrorMessage() {
 		return errorMessage;
 	}
@@ -242,7 +252,13 @@
 		g.drawImage(image, x, y, tileSize, tileSize, bgColor, null);
 		if (errorMessage != null) {
 			g.setColor(Color.BLACK);
-			g.drawString(errorMessage, x + 15, y + 15);
+			int i = 1;
+			for (String line : errorMessage.split("\n")){
+				for (String linepart : line.split("(?<=\\G.{45})")) {
+					g.drawString(linepart, x + 5, y + (15*i));
+					i++;
+				}
+			}
 		}
 	}
 
Index: src/main/java/mobac/gui/mapview/TileLoader.java
===================================================================
--- src/main/java/mobac/gui/mapview/TileLoader.java	(revision 2475)
+++ src/main/java/mobac/gui/mapview/TileLoader.java	(working copy)
@@ -118,8 +118,12 @@
 				tile.setErrorMessage("TLS error");
 			} catch (DownloadFailedException e) {
 				log.warn("Downloading of " + tile + " failed: " + e.getMessage());
-				tile.setErrorImage();
-				tile.setErrorMessage(e.generateReponseErrorText());
+				if(e.isTypeImage()){
+					tile.setErrorImage(e.getResponseData());
+				} else {
+					tile.setErrorImage();
+					tile.setErrorMessage(e.generateReponseErrorText());
+				}
 			} catch (IOException e) {
 				log.warn("Downloading of " + tile + " failed: " + e.getMessage());
 				tile.setErrorImage();
Index: src/main/java/mobac/gui/panels/JMapSourcesPanel.java
===================================================================
--- src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(revision 2475)
+++ src/main/java/mobac/gui/panels/JMapSourcesPanel.java	(working copy)
@@ -45,7 +45,7 @@
 		JScrollPane mapSourceTreeScrollPane = new JScrollPane(mapSourceTree, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
 				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 200));
+		mapSourceTreeScrollPane.setPreferredSize(new Dimension(100, 550));
 		mapSourceTreeScrollPane.setAutoscrolls(true);
 		addContent(mapSourceTreeScrollPane, GBC.eol().fill().insets(0, 1, 0, 0));
 	}
Index: src/main/java/mobac/gui/settings/SettingsGUI.java
===================================================================
--- src/main/java/mobac/gui/settings/SettingsGUI.java	(revision 2475)
+++ src/main/java/mobac/gui/settings/SettingsGUI.java	(working copy)
@@ -97,7 +97,7 @@
 
 	private static final Logger LOG = Logger.getLogger(SettingsGUI.class);
 
-	private static final Integer[] THREADCOUNT_LIST = { 1, 2, 4, 6 };
+	private static final Integer[] THREADCOUNT_LIST = { 1, 2, 4, 6, 12, 24 };
 
 	private static final long MBIT1 = 1000000 / 8;
 
Index: src/main/java/mobac/program/download/MobacTrustManager.java
===================================================================
--- src/main/java/mobac/program/download/MobacTrustManager.java	(revision 2475)
+++ src/main/java/mobac/program/download/MobacTrustManager.java	(working copy)
@@ -106,7 +106,8 @@
 				// TODO: Add GUI for manually adding this certificate as trusted.
 				String message = "Untrusted certificate encountered: publicKeyHash=\"" + pubKeySha256Hash
 						+ "\"; certificate issued for " + cert.getSubjectDN();
-				throw new CertificateException(message);
+				// throw new CertificateException(message);
+				log.warn(message);
 			}
 		}
 	}
Index: src/main/java/mobac/program/download/TileDownLoader.java
===================================================================
--- src/main/java/mobac/program/download/TileDownLoader.java	(revision 2475)
+++ src/main/java/mobac/program/download/TileDownLoader.java	(working copy)
@@ -320,15 +320,17 @@
 			}
 			data = Utilities.getInputBytes(wrappedInput);
 		} catch (IOException e) {
+			byte[] errData;
 			try (InputStream errorIn = conn.getErrorStream()) {
-				byte[] errData = Utilities.getInputBytes(errorIn);
+				errData = Utilities.getInputBytes(errorIn);
 				log.trace("Retrieved " + errData.length + " error bytes for a HTTP " + conn.getResponseCode() + " from "
 						+ conn.getURL());
-				throw new DownloadFailedException(conn, errData, e);
+				
 			} catch (Exception e1) {
 				log.debug("Error retrieving error stream content: " + e1);
-				throw new DownloadFailedException(conn, null, e);
+				errData = null;
 			}
+			throw new DownloadFailedException(conn, errData, e);
 		}
 		log.trace("Retrieved " + data.length + " bytes for a HTTP " + conn.getResponseCode());
 		if (data.length == 0) {
@@ -371,7 +373,7 @@
 		return (onlineETag.equals(eTag));
 	}
 
-	protected static void checkContentType(HttpURLConnection conn, byte[] data) throws UnrecoverableDownloadException {
+	protected static void checkContentType(HttpURLConnection conn, byte[] data) throws DownloadFailedException, IOException {
 		String contentType = conn.getContentType();
 		if (contentType != null) {
 			contentType = contentType.toLowerCase();
@@ -379,8 +381,7 @@
 				if (log.isTraceEnabled() && contentType.startsWith("text/")) {
 					log.trace("Content (" + contentType + "): " + new String(data));
 				}
-				throw new UnrecoverableDownloadException("Content type of the loaded image is unknown: " + contentType,
-						UnrecoverableDownloadException.ERROR_CODE_CONTENT_TYPE);
+				throw new DownloadFailedException(conn, data);
 			}
 		}
 	}
