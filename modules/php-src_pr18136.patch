From 141643ab0292be47d3b87a0be2afa871be57897e Mon Sep 17 00:00:00 2001
From: nielsdos <foo@example.com>
Date: Mon, 14 Apr 2025 06:24:17 -0700
Subject: [PATCH] PoC

---
 Zend/asm/save_xmm_x86_64_ms_masm.asm |  35 +++++++++++++++++++++++++++
 Zend/zend_vm_execute.h               | Bin 2278108 -> 2278477 bytes
 Zend/zend_vm_gen.php                 |  12 +++++++++
 win32/build/config.w32               |  11 ++++++++-
 4 files changed, 57 insertions(+), 1 deletion(-)
 create mode 100644 Zend/asm/save_xmm_x86_64_ms_masm.asm

diff --git a/Zend/asm/save_xmm_x86_64_ms_masm.asm b/Zend/asm/save_xmm_x86_64_ms_masm.asm
new file mode 100644
index 00000000000..a6700f03996
--- /dev/null
+++ b/Zend/asm/save_xmm_x86_64_ms_masm.asm
@@ -0,0 +1,35 @@
+.code
+
+PUBLIC zend_win64_save_xmm_regs
+
+zend_win64_save_xmm_regs PROC
+    movaps xmmword ptr [rcx + 16*0], xmm6
+    movaps xmmword ptr [rcx + 16*1], xmm7
+    movaps xmmword ptr [rcx + 16*2], xmm8
+    movaps xmmword ptr [rcx + 16*3], xmm9
+    movaps xmmword ptr [rcx + 16*4], xmm10
+    movaps xmmword ptr [rcx + 16*5], xmm11
+    movaps xmmword ptr [rcx + 16*6], xmm12
+    movaps xmmword ptr [rcx + 16*7], xmm13
+    movaps xmmword ptr [rcx + 16*8], xmm14
+    movaps xmmword ptr [rcx + 16*9], xmm15
+    ret
+zend_win64_save_xmm_regs ENDP
+
+PUBLIC zend_win64_restore_xmm_regs
+
+zend_win64_restore_xmm_regs PROC
+    movaps xmm6, xmmword ptr [rcx + 16*0]
+    movaps xmm7, xmmword ptr [rcx + 16*1]
+    movaps xmm8, xmmword ptr [rcx + 16*2]
+    movaps xmm9, xmmword ptr [rcx + 16*3]
+    movaps xmm10, xmmword ptr [rcx + 16*4]
+    movaps xmm11, xmmword ptr [rcx + 16*5]
+    movaps xmm12, xmmword ptr [rcx + 16*6]
+    movaps xmm13, xmmword ptr [rcx + 16*7]
+    movaps xmm14, xmmword ptr [rcx + 16*8]
+    movaps xmm15, xmmword ptr [rcx + 16*9]
+    ret
+zend_win64_restore_xmm_regs ENDP
+
+END
diff --git a/Zend/zend_vm_gen.php b/Zend/zend_vm_gen.php
index 7f503e78e29..dc61ccc4cb5 100755
--- a/Zend/zend_vm_gen.php
+++ b/Zend/zend_vm_gen.php
@@ -2082,6 +2082,12 @@ function gen_executor($f, $skl, $spec, $kind, $executor_name, $initializer_name)
                         out($f,$m[1]."zend_execute_data *execute_data = ex;\n");
                         out($f,"#endif\n");
                     }
+                    out($f,"#ifdef ZEND_WIN32\n");
+                    out($f,$m[1]."__m128 preserved_xmm_regs[10];\n");
+                    out($f,$m[1]."extern void zend_win64_save_xmm_regs(__m128 *);\n");
+                    out($f,$m[1]."extern void zend_win64_restore_xmm_regs(const __m128 *);\n");
+                    out($f,$m[1]."zend_win64_save_xmm_regs(preserved_xmm_regs);\n");
+                    out($f,"#endif\n");
                     break;
                 case "INTERNAL_LABELS":
                     if ($kind == ZEND_VM_KIND_GOTO || $kind == ZEND_VM_KIND_HYBRID) {
@@ -2176,6 +2182,9 @@ function gen_executor($f, $skl, $spec, $kind, $executor_name, $initializer_name)
                                 "# ifdef ZEND_VM_IP_GLOBAL_REG\n" .
                                 $m[1]."opline = vm_stack_data.orig_opline;\n" .
                                 "# endif\n" .
+                                "# ifdef PHP_WIN32\n" .
+                                $m[1]."zend_win64_restore_xmm_regs(preserved_xmm_regs);\n" .
+                                "# endif\n" .
                                 $m[1]."return;\n" .
                                 "#else\n" .
                                 $m[1]."if (EXPECTED(ret > 0)) {\n" .
@@ -2185,6 +2194,9 @@ function gen_executor($f, $skl, $spec, $kind, $executor_name, $initializer_name)
                                 "# ifdef ZEND_VM_IP_GLOBAL_REG\n" .
                                 $m[1]."\topline = vm_stack_data.orig_opline;\n" .
                                 "# endif\n".
+                                "# ifdef PHP_WIN32\n" .
+                                $m[1]."\tzend_win64_restore_xmm_regs(&preserved_xmm_regs);\n" .
+                                "# endif\n" .
                                 $m[1]."\treturn;\n".
                                 $m[1]."}\n".
                                 "#endif\n");
diff --git a/win32/build/config.w32 b/win32/build/config.w32
index 043f18b275b..7180e841ebc 100644
--- a/win32/build/config.w32
+++ b/win32/build/config.w32
@@ -267,7 +267,11 @@ if (TARGET_ARCH == 'arm64') {
 	DEFINE('FIBER_ASM_FLAGS', '/DBOOST_CONTEXT_EXPORT=EXPORT /nologo /c /Fo');
 }
 
-ADD_FLAG('ASM_OBJS', '$(BUILD_DIR)\\Zend\\jump_' + FIBER_ASM_ABI + '.obj $(BUILD_DIR)\\Zend\\make_' + FIBER_ASM_ABI + '.obj');
+var all_asm_objs = '$(BUILD_DIR)\\Zend\\jump_' + FIBER_ASM_ABI + '.obj $(BUILD_DIR)\\Zend\\make_' + FIBER_ASM_ABI + '.obj';
+if (TARGET_ARCH == 'x64') {
+	all_asm_objs += ' $(BUILD_DIR)\\Zend\\save_xmm_x86_64_ms_masm.obj';
+}
+ADD_FLAG('ASM_OBJS', all_asm_objs);
 
 MFO.WriteLine('$(BUILD_DIR)\\Zend\\jump_' + FIBER_ASM_ABI + '.obj: Zend\\asm\\jump_' + FIBER_ASM_ABI + '.asm');
 MFO.WriteLine('\t$(PHP_ASSEMBLER) $(FIBER_ASM_FLAGS) $(BUILD_DIR)\\Zend\\jump_$(FIBER_ASM_ABI).obj Zend\\asm\\jump_$(FIBER_ASM_ABI).asm');
@@ -275,6 +279,11 @@ MFO.WriteLine('\t$(PHP_ASSEMBLER) $(FIBER_ASM_FLAGS) $(BUILD_DIR)\\Zend\\jump_$(
 MFO.WriteLine('$(BUILD_DIR)\\Zend\\make_' + FIBER_ASM_ABI + '.obj: Zend\\asm\\make_' + FIBER_ASM_ABI + '.asm');
 MFO.WriteLine('\t$(PHP_ASSEMBLER) $(FIBER_ASM_FLAGS) $(BUILD_DIR)\\Zend\\make_$(FIBER_ASM_ABI).obj Zend\\asm\\make_$(FIBER_ASM_ABI).asm');
 
+if (TARGET_ARCH == 'x64') {
+	MFO.WriteLine('$(BUILD_DIR)\\Zend\\save_xmm_x86_64_ms_masm.obj: Zend\\asm\\save_xmm_x86_64_ms_masm.asm');
+	MFO.WriteLine('\t$(PHP_ASSEMBLER) $(FIBER_ASM_FLAGS) $(BUILD_DIR)\\Zend\\save_xmm_x86_64_ms_masm.obj Zend\\asm\\save_xmm_x86_64_ms_masm.asm');
+}
+
 ADD_FLAG("CFLAGS_BD_ZEND", "/D ZEND_ENABLE_STATIC_TSRMLS_CACHE=1");
 if (VS_TOOLSET && VCVERS >= 1914) {
 	ADD_FLAG("CFLAGS_BD_ZEND", "/d2FuncCache1");
-- 
2.45.2.windows.1
