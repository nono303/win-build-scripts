diff --git a/main/network.c b/main/network.c
index 1ad7e370cc..4b7e9d628a 100644
--- a/main/network.c
+++ b/main/network.c
@@ -118,7 +118,9 @@ static const char *php_gai_strerror(int code)
 		{EAI_NONAME, "Name or service not known"},
 		{EAI_SERVICE, "Servname not supported for ai_socktype"},
 		{EAI_SOCKTYPE, "ai_socktype not supported"},
+#  ifdef EAI_SYSTEM
 		{EAI_SYSTEM, "System error"},
+#  endif
 		{0, NULL}
 	};
 	int i;
diff --git "a/ext/iconv/iconv.c" "b/ext/iconv/iconv.c"
index 4850c00624..b1e383734e 100644
--- "a/ext/iconv/iconv.c"
+++ "b/ext/iconv/iconv.c"
@@ -194,7 +194,7 @@ PHP_MINIT_FUNCTION(miconv)
 	{
 		static char buf[16];
 		snprintf(buf, sizeof(buf), "%d.%d",
-			_libiconv_version >> 8, _libiconv_version & 0xff);
+			_LIBICONV_VERSION >> 8, _LIBICONV_VERSION & 0xff);
 		version = buf;
 	}
 #elif HAVE_GLIBC_ICONV
diff --git "a/ext/phar/config.w32" "b/ext/phar/config.w32"
index c68ba08f2c..241f3eeddb 100644
--- "a/ext/phar/config.w32"
+++ "b/ext/phar/config.w32"
@@ -13,10 +13,10 @@ if (PHP_PHAR != "no") {
 		ADD_FLAG("CFLAGS_PHAR", "/D COMPILE_DL_PHAR ");
 	}
 	if (PHP_PHAR_NATIVE_SSL != "no") {
-		if (CHECK_LIB("libeay32st.lib", "phar")) {
+		if (CHECK_LIB("libcrypto.lib", "phar")) {
 			/* We don't really need GDI for this, but there's no
 			way to avoid linking it in the static openssl build */
-			ADD_FLAG("LIBS_PHAR", "libeay32st.lib gdi32.lib");
+			ADD_FLAG("LIBS_PHAR", "libcrypto.lib gdi32.lib");
 			if (PHP_DEBUG == "no") {
 				/* Silence irrelevant-to-us warning in release builds */
 				ADD_FLAG("LDFLAGS_PHAR", "/IGNORE:4089 ");
diff --git "a/ext/gmp/gmp.c" "b/ext/gmp/gmp.c"
index c75e2788b8..436c58f5ef 100644
--- "a/ext/gmp/gmp.c"
+++ "b/ext/gmp/gmp.c"
@@ -543,10 +543,10 @@ ZEND_MINIT_FUNCTION(gmp)
 	REGISTER_LONG_CONSTANT("GMP_ROUND_ZERO", GMP_ROUND_ZERO, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GMP_ROUND_PLUSINF", GMP_ROUND_PLUSINF, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GMP_ROUND_MINUSINF", GMP_ROUND_MINUSINF, CONST_CS | CONST_PERSISTENT);
-#ifdef mpir_version
-	REGISTER_STRING_CONSTANT("GMP_MPIR_VERSION", (char *)mpir_version, CONST_CS | CONST_PERSISTENT);
+#ifdef _MSC_MPIR_VERSION
+	REGISTER_STRING_CONSTANT("GMP_MPIR_VERSION", (char *)_MSC_MPIR_VERSION, CONST_CS | CONST_PERSISTENT);
 #endif
-	REGISTER_STRING_CONSTANT("GMP_VERSION", (char *)gmp_version, CONST_CS | CONST_PERSISTENT);
+	REGISTER_STRING_CONSTANT("GMP_VERSION", (char *)GMP_VERSION, CONST_CS | CONST_PERSISTENT);
 
 	REGISTER_LONG_CONSTANT("GMP_MSW_FIRST", GMP_MSW_FIRST, CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GMP_LSW_FIRST", GMP_LSW_FIRST, CONST_CS | CONST_PERSISTENT);
@@ -575,10 +575,11 @@ ZEND_MODULE_INFO_D(gmp)
 {
 	php_info_print_table_start();
 	php_info_print_table_row(2, "gmp support", "enabled");
-#ifdef mpir_version
-	php_info_print_table_row(2, "MPIR version", mpir_version);
-#else
-	php_info_print_table_row(2, "GMP version", gmp_version);
+#ifdef _MSC_MPIR_VERSION
+	php_info_print_table_row(2, "MPIR version", _MSC_MPIR_VERSION);
+#endif
+#ifdef GMP_VERSION
+	php_info_print_table_row(2, "GMP version", GMP_VERSION);
 #endif
 	php_info_print_table_end();
 }
diff --git "a/ext/libxml/config.w32" "b/ext/libxml/config.w32"
index b11c57bc44..e4dfb70c4b 100644
--- "a/ext/libxml/config.w32"
+++ "b/ext/libxml/config.w32"
@@ -1,12 +1,35 @@
+// $Id$
 // vim:ft=javascript
+// https://gist.github.com/auroraeosrose/3452993
 
 ARG_WITH("libxml", "LibXML support", "yes");
+ARG_WITH("libxmlshared", "LibXML support", "no");
 
-if (PHP_LIBXML == "yes") {
-	if (CHECK_LIB("libxml2_a_dll.lib;libxml2_a.lib", "libxml") &&
-			CHECK_LIB("libiconv_a.lib;iconv_a.lib;libiconv.lib;iconv.lib", "libxml") &&
-			CHECK_HEADER_ADD_INCLUDE("libxml/parser.h", "CFLAGS_LIBXML", PHP_PHP_BUILD + "\\include\\libxml2") &&
-			CHECK_HEADER_ADD_INCLUDE("libxml/tree.h", "CFLAGS_LIBXML", PHP_PHP_BUILD + "\\include\\libxml2") &&
+if (PHP_LIBXMLSHARED == "yes") {
+    PHP_LIBXML = PHP_LIBXMLSHARED;
+    PHP_LIBXML_SHARED = PHP_LIBXMLSHARED_SHARED;
+	if (CHECK_LIB("libxml2.lib", "libxml") &&
+	    CHECK_LIB("iconv.lib", "libxml") &&
+		CHECK_LIB("liblzma.lib", "libxml") &&
+		CHECK_LIB("icuuc.lib", "libxml") &&
+		CHECK_HEADER_ADD_INCLUDE("libxml/threads.h", "CFLAGS_LIBXML", PHP_PHP_BUILD + "\\include\\libxml2") &&
+            ADD_EXTENSION_DEP('libxml', 'iconv')) {
+
+		EXTENSION("libxml", "libxml.c", PHP_LIBXML_SHARED);
+		AC_DEFINE("HAVE_LIBXML", 1, "LibXML support");
+		ADD_FLAG("CFLAGS_LIBXML", "/D HAVE_WIN32_THREADS /D LIBXML_STATIC_FOR_DLL");
+		PHP_INSTALL_HEADERS("ext/libxml/", "php_libxml.h");
+	} else {
+		WARNING("libxml support can't be enabled, iconv or libxml are missing")
+		PHP_LIBXML = "no"
+	}
+} else if (PHP_LIBXML == "yes") {
+	if (CHECK_LIB("libxml2_a_dll.lib", "libxml") &&
+	    CHECK_LIB("iconv.lib", "libxml") &&
+		CHECK_LIB("liblzma.lib", "libxml") &&
+		CHECK_LIB("icuuc.lib", "libxml") &&
+		CHECK_HEADER_ADD_INCLUDE("libxml/parser.h", "CFLAGS_LIBXML", PHP_PHP_BUILD + "\\include\\libxml2") &&
+		CHECK_HEADER_ADD_INCLUDE("libxml/tree.h", "CFLAGS_LIBXML", PHP_PHP_BUILD + "\\include\\libxml2") &&
 			ADD_EXTENSION_DEP('libxml', 'iconv')) {
 
 		EXTENSION("libxml", "libxml.c", false /* never shared */, "/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1");
