diff --git a/src/memcache_binary_protocol.c b/src/memcache_binary_protocol.c
index 707b351..1dc8fc6 100644
--- a/src/memcache_binary_protocol.c
+++ b/src/memcache_binary_protocol.c
@@ -26,7 +26,7 @@
 #define MMC_DEBUG 0
 
 #ifdef PHP_WIN32
-#include <win32/php_stdint.h>
+#include <inttypes.h>
 #include <winsock2.h>
 #else
 #include <stdint.h>
diff --git a/src/memcache_pool.h b/src/memcache_pool.h
index cb3d086..3a2ddc2 100644
--- a/src/memcache_pool.h
+++ b/src/memcache_pool.h
@@ -35,7 +35,7 @@
 #endif
 
 #ifdef PHP_WIN32
-#include <win32/php_stdint.h>
+#include <inttypes.h>
 #else
 #include <stdint.h>
 #endif

From 56253120562364b67cbba818c636bde4fbf23cec Mon Sep 17 00:00:00 2001
From: Andrija Vucinic <andrija.vucinic@gmail.com>
Date: Thu, 5 Nov 2020 18:51:06 +0100
Subject: [PATCH] Explicitly disconnect from servers. https://github.com/websupport-sk/pecl-memcache/pull/77

---
 src/memcache_pool.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/memcache_pool.c b/src/memcache_pool.c
index 5f73a18..7695810 100644
--- a/src/memcache_pool.c
+++ b/src/memcache_pool.c
@@ -851,6 +851,9 @@ void mmc_server_free(mmc_t *mmc) /* {{{ */
 {
 	mmc_server_sleep(mmc);
 
+	_mmc_server_disconnect(mmc, &(mmc->tcp), 0);
+	_mmc_server_disconnect(mmc, &(mmc->udp), 0);
+
 	pefree(mmc->host, mmc->persistent);
 	pefree(mmc, mmc->persistent);
 }

From 0c542a8d851d52b34083820fd667a50582ee6564 Mon Sep 17 00:00:00 2001
From: Andrija Vucinic <andrija.vucinic@gmail.com>
Date: Fri, 6 Nov 2020 13:44:43 +0100
Subject: [PATCH 1/2] Memory corruption when server unreachable, and multiple
 get segfaults https://github.com/websupport-sk/pecl-memcache/pull/78
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

`mmc_pool_select` change:
The problem was that memcache.so will execute “get()s” when “set()s” are
requested and vice versa. This would happen because in certain cases of
Memcached failures, instead of retrying failed requests memcache.so will
just forget about them and move on to the next request, while leaving
the state of the old request uncleaned. Then when a new request comes,
memcache.so will retry the previously failed request which already has
many of it’s pointers free()d and thus the segfaults.

`mmc_pool_run` changes:
Executing memcache_get()s with multiple keys were not retried properly
and left for the next request, where they segfaulted.
---
 src/memcache_pool.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/src/memcache_pool.c b/src/memcache_pool.c
index 5f73a18..c04d56e 100644
--- a/src/memcache_pool.c
+++ b/src/memcache_pool.c
@@ -1542,6 +1542,10 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 			/* add server to send queue once more */
 			mmc_queue_push(pool->sending, mmc);
 		}
+
+		if ( ! pool->sending->len && ( mmc->sendreq != NULL || mmc->sendqueue.len ) ) {
+			php_error_docref( NULL TSRMLS_CC, E_WARNING, "mmc_pool_select() failed to cleanup when sending! Sendqueue: %d", mmc->sendqueue.len );
+		}
 	}
 
 	for (i=0; i < reading->len; i++) {
@@ -1638,6 +1642,8 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 							if (result == MMC_REQUEST_FAILURE) {
 								/* take server offline and failover requests */
 								mmc_server_deactivate(pool, mmc);
+							} else {
+								mmc_select_retry(pool, mmc, mmc->readreq TSRMLS_CC);
 							}
 						}
 						break;
@@ -1660,24 +1666,35 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 			/* add server to read queue once more */
 			mmc_queue_push(pool->reading, mmc);
 		}
+
+		if ( ! pool->reading->len && ( mmc->readreq != NULL || mmc->readqueue.len ) ) {
+			php_error_docref( NULL TSRMLS_CC, E_WARNING, "mmc_pool_select() failed to cleanup when reading! Readqueue: %d", mmc->readqueue.len );
+		}
 	}
 
 	pool->in_select = 0;
 }
 /* }}} */
 
-void mmc_pool_run(mmc_pool_t *pool)  /*
-	runs all scheduled requests to completion {{{ */
-{
+void mmc_pool_schedule_pending(mmc_pool_t *pool) {
 	mmc_t *mmc;
 	while ((mmc = mmc_queue_pop(&(pool->pending))) != NULL) {
 		pool->protocol->end_get(mmc->buildreq);
-		mmc_pool_schedule(pool, mmc, mmc->buildreq);
+		mmc_pool_schedule(pool, mmc, mmc->buildreq TSRMLS_CC);
 		mmc->buildreq = NULL;
 	}
+}
+
+void mmc_pool_run(mmc_pool_t *pool)  /*
+	runs all scheduled requests to completion {{{ */
+{
+	mmc_t *mmc;
+
+	mmc_pool_schedule_pending(pool);
 
 	while (pool->reading->len || pool->sending->len) {
 		mmc_pool_select(pool);
+		mmc_pool_schedule_pending(pool);
 	}
 }
 /* }}} */

From 6e16576d4b08a6479c13dd9eeb4f1fb9ef7ca6d6 Mon Sep 17 00:00:00 2001
From: Andrija Vucinic <andrija.vucinic@gmail.com>
Date: Fri, 6 Nov 2020 13:54:35 +0100
Subject: [PATCH 2/2] some leftovers from previous versions

---
 src/memcache_pool.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/memcache_pool.c b/src/memcache_pool.c
index c04d56e..72289be 100644
--- a/src/memcache_pool.c
+++ b/src/memcache_pool.c
@@ -1544,7 +1544,7 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 		}
 
 		if ( ! pool->sending->len && ( mmc->sendreq != NULL || mmc->sendqueue.len ) ) {
-			php_error_docref( NULL TSRMLS_CC, E_WARNING, "mmc_pool_select() failed to cleanup when sending! Sendqueue: %d", mmc->sendqueue.len );
+			php_error_docref( NULL, E_WARNING, "mmc_pool_select() failed to cleanup when sending! Sendqueue: %d", mmc->sendqueue.len );
 		}
 	}
 
@@ -1643,7 +1643,7 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 								/* take server offline and failover requests */
 								mmc_server_deactivate(pool, mmc);
 							} else {
-								mmc_select_retry(pool, mmc, mmc->readreq TSRMLS_CC);
+								mmc_select_retry(pool, mmc, mmc->readreq);
 							}
 						}
 						break;
@@ -1668,7 +1668,7 @@ void mmc_pool_select(mmc_pool_t *pool) /*
 		}
 
 		if ( ! pool->reading->len && ( mmc->readreq != NULL || mmc->readqueue.len ) ) {
-			php_error_docref( NULL TSRMLS_CC, E_WARNING, "mmc_pool_select() failed to cleanup when reading! Readqueue: %d", mmc->readqueue.len );
+			php_error_docref( NULL, E_WARNING, "mmc_pool_select() failed to cleanup when reading! Readqueue: %d", mmc->readqueue.len );
 		}
 	}
 
@@ -1680,7 +1680,7 @@ void mmc_pool_schedule_pending(mmc_pool_t *pool) {
 	mmc_t *mmc;
 	while ((mmc = mmc_queue_pop(&(pool->pending))) != NULL) {
 		pool->protocol->end_get(mmc->buildreq);
-		mmc_pool_schedule(pool, mmc, mmc->buildreq TSRMLS_CC);
+		mmc_pool_schedule(pool, mmc, mmc->buildreq);
 		mmc->buildreq = NULL;
 	}
 }
